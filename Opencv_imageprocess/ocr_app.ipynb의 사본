{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"mt_z3OAddRPB"},"outputs":[],"source":["# 필요한 패키지 설치\n","!pip install pytesseract pdf2image google-generativeai python-dotenv pillow ipywidgets\n","\n","# Tesseract OCR 및 의존성 설치\n","!apt-get update\n","!apt-get install -y tesseract-ocr tesseract-ocr-kor\n","!apt-get install -y poppler-utils\n","\n","import os\n","import gc\n","import pytesseract\n","from pdf2image import convert_from_path\n","from PIL import Image\n","import google.generativeai as genai\n","from google.colab import files\n","from IPython.display import display, HTML, Markdown\n","import ipywidgets as widgets\n","from ipywidgets import Layout, Box, VBox, HBox, HTML as HTMLWidget, Accordion, Tab\n","import traceback\n","\n","# Gemini API 설정\n","GOOGLE_API_KEY = \"\"\n","genai.configure(api_key=GOOGLE_API_KEY)\n","model = genai.GenerativeModel('gemini-1.5-flash')\n","\n","# 전역 변수로 결과 저장\n","extracted_text_global = \"\"\n","analysis_result_global = \"\"\n","\n","def create_progress_widget():\n","    \"\"\"진행상황 표시 위젯 생성\"\"\"\n","    progress = widgets.IntProgress(\n","        value=0,\n","        min=0,\n","        max=100,\n","        description='진행률:',\n","        bar_style='',\n","        style={'bar_color': '#4CAF50'},\n","        layout=Layout(width='100%')\n","    )\n","\n","    status_label = widgets.HTML(\n","        value=\"<b>대기 중...</b>\",\n","        layout=Layout(width='100%')\n","    )\n","\n","    return VBox([progress, status_label]), progress, status_label\n","\n","def extract_text_from_pdf_widget(pdf_path, progress_widget, status_widget):\n","    \"\"\"위젯과 함께 PDF 텍스트 추출\"\"\"\n","    global extracted_text_global\n","\n","    try:\n","        status_widget.value = \"<b style='color: blue;'>📁 PDF 파일 분석 중...</b>\"\n","\n","        # 파일 크기 확인\n","        file_size = os.path.getsize(pdf_path) / (1024 * 1024)\n","        status_widget.value = f\"<b style='color: blue;'>📊 파일 크기: {file_size:.2f} MB</b>\"\n","\n","        text = \"\"\n","        max_pages = 10  # 고정된 페이지 수\n","        processed_pages = 0\n","\n","        progress_widget.max = max_pages\n","\n","        # 페이지별 순차 처리\n","        for page_num in range(1, max_pages + 1):\n","            try:\n","                status_widget.value = f\"<b style='color: green;'>📄 페이지 {page_num}/{max_pages} 처리 중...</b>\"\n","                progress_widget.value = page_num - 1\n","\n","                # 한 페이지씩 변환\n","                images = convert_from_path(\n","                    pdf_path,\n","                    first_page=page_num,\n","                    last_page=page_num,\n","                    dpi=200,\n","                    thread_count=1\n","                )\n","\n","                if not images:\n","                    break\n","\n","                image = images[0]\n","\n","                # 이미지 크기 조정\n","                max_dimension = 2000\n","                if image.width > max_dimension or image.height > max_dimension:\n","                    ratio = min(max_dimension/image.width, max_dimension/image.height)\n","                    new_size = (int(image.width * ratio), int(image.height * ratio))\n","                    image = image.resize(new_size, Image.Resampling.LANCZOS)\n","\n","                # OCR 실행\n","                custom_config = r'--oem 3 --psm 6 -c tessedit_do_invert=0'\n","                page_text = pytesseract.image_to_string(\n","                    image,\n","                    lang='eng+kor',\n","                    config=custom_config\n","                )\n","\n","                text += f\"\\n{'='*20} 페이지 {page_num} {'='*20}\\n\"\n","                text += page_text\n","\n","                # 메모리 정리\n","                image.close()\n","                del image, images, page_text\n","                gc.collect()\n","\n","                processed_pages += 1\n","                progress_widget.value = page_num\n","\n","            except Exception as e:\n","                if \"Unable to get page count\" in str(e) or \"Invalid page\" in str(e):\n","                    status_widget.value = f\"<b style='color: orange;'>⚠️ 페이지 {page_num}에서 종료 (총 {processed_pages}페이지 처리)</b>\"\n","                    break\n","                else:\n","                    status_widget.value = f\"<b style='color: red;'>❌ 페이지 {page_num} 처리 오류</b>\"\n","                    continue\n","\n","        progress_widget.value = progress_widget.max\n","        status_widget.value = f\"<b style='color: green;'>✅ 텍스트 추출 완료! (총 {processed_pages}페이지)</b>\"\n","\n","        extracted_text_global = text\n","        return text\n","\n","    except Exception as e:\n","        status_widget.value = f\"<b style='color: red;'>❌ 오류: {str(e)}</b>\"\n","        return None\n","\n","def analyze_text_widget(text, progress_widget, status_widget):\n","    \"\"\"위젯과 함께 텍스트 분석\"\"\"\n","    global analysis_result_global\n","\n","    try:\n","        if not text or len(text.strip()) < 10:\n","            return \"추출된 텍스트가 없거나 너무 짧습니다.\"\n","\n","        status_widget.value = \"<b style='color: blue;'>🔍 AI 분석 시작...</b>\"\n","        progress_widget.value = 0\n","        progress_widget.max = 100\n","\n","        # 텍스트를 청크로 분할\n","        chunk_size = 15000\n","        chunks = []\n","        for i in range(0, len(text), chunk_size):\n","            chunk = text[i:i + chunk_size]\n","            if chunk.strip():\n","                chunks.append(chunk)\n","\n","        status_widget.value = f\"<b style='color: blue;'>📊 텍스트를 {len(chunks)}개 섹션으로 분할</b>\"\n","\n","        summaries = []\n","        for i, chunk in enumerate(chunks):\n","            try:\n","                progress_value = int((i / len(chunks)) * 80)  # 80%까지는 청크 분석\n","                progress_widget.value = progress_value\n","                status_widget.value = f\"<b style='color: green;'>🔍 섹션 {i+1}/{len(chunks)} 분석 중...</b>\"\n","\n","                prompt = f\"\"\"다음 PDF 텍스트를 간단히 요약해주세요 (200자 이내):\n","\n","{chunk}\n","\n","요약:\"\"\"\n","\n","                response = model.generate_content(prompt)\n","                summaries.append(f\"**섹션 {i+1}**\\n{response.text}\")\n","\n","                import time\n","                time.sleep(1)\n","\n","            except Exception as e:\n","                summaries.append(f\"**섹션 {i+1}** - 분석 실패: {str(e)}\")\n","\n","        # 최종 통합 분석\n","        progress_widget.value = 90\n","        status_widget.value = \"<b style='color: blue;'>🎯 최종 분석 중...</b>\"\n","\n","        combined_summary = \"\\n\\n\".join(summaries)\n","\n","        final_prompt = f\"\"\"다음은 PDF 문서의 각 섹션별 요약입니다. 전체 문서를 종합 분석해주세요:\n","\n","{combined_summary}\n","\n","다음 형식으로 답변해주세요:\n","## 📋 문서 정보\n","- **문서 유형**:\n","- **페이지 수**: 약 10페이지\n","\n","## 📝 주요 내용\n","(핵심 내용 3-5줄 요약)\n","\n","## 🔑 핵심 키워드\n","(중요한 키워드들을 쉼표로 구분)\n","\n","## 💡 주목할 점\n","(특별히 주목할 만한 내용이나 인사이트)\"\"\"\n","\n","        final_response = model.generate_content(final_prompt)\n","\n","        progress_widget.value = 100\n","        status_widget.value = \"<b style='color: green;'>✅ 분석 완료!</b>\"\n","\n","        full_analysis = f\"{final_response.text}\\n\\n---\\n\\n## 📄 섹션별 상세 요약\\n\\n{combined_summary}\"\n","        analysis_result_global = full_analysis\n","\n","        return full_analysis\n","\n","    except Exception as e:\n","        status_widget.value = f\"<b style='color: red;'>❌ 분석 오류: {str(e)}</b>\"\n","        return f\"분석 중 오류 발생: {str(e)}\"\n","\n","def create_result_widget():\n","    \"\"\"결과 표시 위젯 생성\"\"\"\n","    # 탭 위젯 생성\n","    tab = Tab()\n","\n","    # 추출된 텍스트 표시 영역\n","    extracted_text_area = widgets.Textarea(\n","        value=\"텍스트 추출 결과가 여기에 표시됩니다...\",\n","        layout=Layout(width='100%', height='400px'),\n","        disabled=True\n","    )\n","\n","    # 분석 결과 표시 영역 (HTML로 마크다운 렌더링)\n","    analysis_area = HTMLWidget(\n","        value=\"<p>분석 결과가 여기에 표시됩니다...</p>\",\n","        layout=Layout(width='100%', height='400px', overflow='auto',\n","                     border='1px solid #ddd', padding='10px')\n","    )\n","\n","    # 다운로드 버튼들\n","    download_text_btn = widgets.Button(\n","        description='📄 텍스트 다운로드',\n","        button_style='info',\n","        layout=Layout(width='200px')\n","    )\n","\n","    download_analysis_btn = widgets.Button(\n","        description='📊 분석 다운로드',\n","        button_style='success',\n","        layout=Layout(width='200px')\n","    )\n","\n","    def download_text(b):\n","        if extracted_text_global:\n","            files.download('extracted_text.txt')\n","\n","    def download_analysis(b):\n","        if analysis_result_global:\n","            files.download('analysis.txt')\n","\n","    download_text_btn.on_click(download_text)\n","    download_analysis_btn.on_click(download_analysis)\n","\n","    download_box = HBox([download_text_btn, download_analysis_btn])\n","\n","    # 탭에 컨텐츠 추가\n","    tab.children = [\n","        VBox([extracted_text_area, download_text_btn]),\n","        VBox([analysis_area, download_analysis_btn])\n","    ]\n","    tab.titles = ['📄 추출된 텍스트', '🔍 AI 분석 결과']\n","\n","    return tab, extracted_text_area, analysis_area\n","\n","def update_result_widgets(extracted_text_area, analysis_area):\n","    \"\"\"결과 위젯 업데이트\"\"\"\n","    global extracted_text_global, analysis_result_global\n","\n","    if extracted_text_global:\n","        # 텍스트 길이 제한 (위젯 성능을 위해)\n","        display_text = extracted_text_global\n","        if len(display_text) > 50000:\n","            display_text = display_text[:50000] + \"\\n\\n... (텍스트가 잘렸습니다. 전체 내용은 다운로드 파일에서 확인하세요)\"\n","        extracted_text_area.value = display_text\n","\n","        # 파일 저장\n","        with open('extracted_text.txt', 'w', encoding='utf-8') as f:\n","            f.write(extracted_text_global)\n","\n","    if analysis_result_global:\n","        # 마크다운을 HTML로 변환하여 표시\n","        html_content = analysis_result_global.replace('\\n', '<br>')\n","        html_content = html_content.replace('##', '<h3>').replace('**', '<strong>').replace('**', '</strong>')\n","        html_content = html_content.replace('- **', '<li><strong>').replace('**:', '</strong>:')\n","\n","        analysis_area.value = f\"<div style='font-family: Arial, sans-serif; line-height: 1.6;'>{html_content}</div>\"\n","\n","        # 파일 저장\n","        with open('analysis.txt', 'w', encoding='utf-8') as f:\n","            f.write(analysis_result_global)\n","\n","def main():\n","    \"\"\"메인 실행 함수 - 위젯 버전\"\"\"\n","    try:\n","        # API 키 확인\n","        if GOOGLE_API_KEY == \"your_api_key_here\":\n","            display(HTMLWidget(value=\"<h3 style='color: red;'>⚠️ GOOGLE_API_KEY를 실제 값으로 설정해주세요!</h3>\"))\n","            return\n","\n","        # 헤더\n","        header = HTMLWidget(\n","            value=\"\"\"\n","            <h2 style='color: #2E7D32; text-align: center;'>\n","                📄 PDF OCR 분석기 (최대 10페이지)\n","            </h2>\n","            <p style='text-align: center; color: #666;'>\n","                PDF 파일을 업로드하면 텍스트 추출 및 AI 분석을 수행합니다\n","            </p>\n","            \"\"\",\n","            layout=Layout(margin='0 0 20px 0')\n","        )\n","\n","        # 진행상황 위젯\n","        progress_box, progress_widget, status_widget = create_progress_widget()\n","\n","        # 결과 표시 위젯\n","        result_tab, extracted_text_area, analysis_area = create_result_widget()\n","\n","        # 업로드 버튼\n","        upload_btn = widgets.Button(\n","            description='📁 PDF 파일 업로드',\n","            button_style='primary',\n","            layout=Layout(width='200px', height='50px')\n","        )\n","\n","        def handle_upload(b):\n","            try:\n","                status_widget.value = \"<b style='color: blue;'>📁 파일 선택 대기 중...</b>\"\n","\n","                uploaded = files.upload()\n","                if not uploaded:\n","                    status_widget.value = \"<b style='color: orange;'>⚠️ 파일이 선택되지 않았습니다</b>\"\n","                    return\n","\n","                pdf_file = list(uploaded.keys())[0]\n","                status_widget.value = f\"<b style='color: green;'>✅ 파일 업로드 완료: {pdf_file}</b>\"\n","\n","                # 텍스트 추출\n","                extracted_text = extract_text_from_pdf_widget(pdf_file, progress_widget, status_widget)\n","\n","                if extracted_text:\n","                    # 텍스트 분석\n","                    analysis = analyze_text_widget(extracted_text, progress_widget, status_widget)\n","\n","                    # 결과 위젯 업데이트\n","                    update_result_widgets(extracted_text_area, analysis_area)\n","\n","                # 파일 정리\n","                try:\n","                    os.remove(pdf_file)\n","                except:\n","                    pass\n","\n","                gc.collect()\n","\n","            except Exception as e:\n","                status_widget.value = f\"<b style='color: red;'>❌ 오류: {str(e)}</b>\"\n","\n","        upload_btn.on_click(handle_upload)\n","\n","        # 전체 UI 구성\n","        main_widget = VBox([\n","            header,\n","            upload_btn,\n","            progress_box,\n","            result_tab\n","        ], layout=Layout(padding='20px'))\n","\n","        display(main_widget)\n","\n","    except Exception as e:\n","        display(HTMLWidget(value=f\"<h3 style='color: red;'>오류: {str(e)}</h3>\"))\n","\n","# 프로그램 실행\n","if __name__ == \"__main__\":\n","    main()"]}]}