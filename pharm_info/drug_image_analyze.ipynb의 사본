{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"GF70S2w7lnzl"},"outputs":[],"source":["import os\n","import cv2\n","import numpy as np\n","from google.colab import files\n","from google.colab.output import eval_js\n","from IPython.display import display, HTML, Image\n","import PIL.Image\n","from PIL import Image as PILImage\n","import base64\n","import io\n","import re\n","import requests\n","import json\n","\n","# Gemini API 관련 함수들\n","def setup_gemini_api():\n","    print(\"Google Cloud 프로젝트 ID와 API 키 설정이 필요합니다.\")\n","\n","    # API 키 입력받기\n","    api_key = input(\"Google API 키를 입력하세요: \")\n","\n","    # API 키 확인\n","    print(\"\\nAPI 키가 제대로 설정되었는지 확인합니다...\")\n","    test_url = f\"https://generativelanguage.googleapis.com/v1beta/models?key={api_key}\"\n","    try:\n","        response = requests.get(test_url)\n","        if response.status_code == 200:\n","            print(\"✅ API 키가 정상적으로 작동합니다.\")\n","        else:\n","            print(f\"❌ API 키 확인 중 오류가 발생했습니다. 상태 코드: {response.status_code}\")\n","            print(response.text)\n","            return None\n","    except Exception as e:\n","        print(f\"❌ API 키 확인 중 오류가 발생했습니다: {e}\")\n","        return None\n","\n","    # API 활성화 안내\n","    print(\"\\n⚠️ 만약 API 호출 시 'Generative Language API has not been used in project' 오류가 발생한다면:\")\n","    print(\"1. https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com 에 접속\")\n","    print(\"2. 해당 프로젝트를 선택하고 'API 사용 설정' 버튼을 클릭\")\n","    print(\"3. 몇 분 후에 다시 시도해보세요.\")\n","\n","    return api_key\n","\n","def analyze_with_gemini(api_key, image_data, medicine_name=None):\n","    # API 엔드포인트 설정\n","    url = f\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}\"\n","\n","    # 이미지를 base64로 인코딩\n","    if isinstance(image_data, bytes):\n","        base64_image = base64.b64encode(image_data).decode('utf-8')\n","    else:\n","        # OpenCV 이미지를 바이트로 변환 후 base64로 인코딩\n","        is_success, buffer = cv2.imencode(\".jpg\", image_data)\n","        base64_image = base64.b64encode(buffer.tobytes()).decode('utf-8')\n","\n","    # 프롬프트 설정\n","    if medicine_name:\n","        text_prompt = f\"\"\"\n","        이 이미지는 '{medicine_name}'이라는 의약품의 사진입니다.\n","        다음 정보를 제공해주세요:\n","        1. 의약품의 주요 성분\n","        2. 주요 효능 및 용도\n","        3. 이 약물과 함께 섭취하면 안 되는 음식 목록\n","        4. 이 약물과 상호작용하는 다른 약물 목록 및 상호작용 영향\n","        5. 주의사항\n","\n","        결과를 한국어로 명확하게 항목별로 정리해서 제공해주세요.\n","        \"\"\"\n","    else:\n","        text_prompt = \"\"\"\n","        이 이미지에 있는 의약품을 분석해주세요.\n","        다음 정보를 제공해주세요:\n","        1. 의약품의 이름과 주요 성분 (이름을 확인할 수 있다면)\n","        2. 주요 효능 및 용도\n","        3. 이 약물과 함께 섭취하면 안 되는 음식 목록\n","        4. 이 약물과 상호작용하는 다른 약물 목록 및 상호작용 영향\n","        5. 주의사항\n","\n","        결과를 한국어로 명확하게 항목별로 정리해서 제공해주세요.\n","        \"\"\"\n","\n","    # API 요청 데이터 구성\n","    payload = {\n","        \"contents\": [\n","            {\n","                \"parts\": [\n","                    {\"text\": text_prompt},\n","                    {\n","                        \"inline_data\": {\n","                            \"mime_type\": \"image/jpeg\",\n","                            \"data\": base64_image\n","                        }\n","                    }\n","                ]\n","            }\n","        ],\n","        \"generation_config\": {\n","            \"temperature\": 0.4,\n","            \"top_p\": 0.8,\n","            \"top_k\": 40,\n","            \"max_output_tokens\": 2048,\n","        }\n","    }\n","\n","    # API 요청 헤더\n","    headers = {\n","        \"Content-Type\": \"application/json\"\n","    }\n","\n","    # API 요청 보내기\n","    print(\"Gemini API에 요청을 보내는 중...\")\n","    try:\n","        response = requests.post(url, headers=headers, data=json.dumps(payload))\n","\n","        if response.status_code == 200:\n","            result = response.json()\n","\n","            try:\n","                # 응답에서 텍스트 추출\n","                text_response = result['candidates'][0]['content']['parts'][0]['text']\n","                return text_response\n","            except KeyError:\n","                print(\"응답 형식이 예상과 다릅니다. 전체 응답을 표시합니다:\")\n","                print(json.dumps(result, indent=2))\n","                return \"응답 파싱 중 오류가 발생했습니다.\"\n","        else:\n","            error_message = f\"API 오류 (상태 코드 {response.status_code}): {response.text}\"\n","            print(error_message)\n","\n","            # 401 오류일 경우 추가 안내\n","            if response.status_code == 401:\n","                print(\"\\n⚠️ API 키가 잘못되었거나 만료되었습니다. 새 API 키를 발급받으세요.\")\n","\n","            # 403 오류일 경우 API 활성화 안내\n","            elif response.status_code == 403:\n","                print(\"\\n⚠️ API 접근이 거부되었습니다. 다음 단계를 확인하세요:\")\n","                print(\"1. https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com 에 접속\")\n","                print(\"2. 해당 프로젝트를 선택하고 'API 사용 설정' 버튼을 클릭\")\n","                print(\"3. 몇 분 후에 다시 시도해보세요.\")\n","\n","            return f\"API 오류: {response.text}\"\n","    except Exception as e:\n","        error_message = f\"요청 중 오류 발생: {str(e)}\"\n","        print(error_message)\n","        return error_message\n","\n","\n","    base64_data = eval_js(js)\n","    binary_data = base64.b64decode(base64_data)\n","    image = PILImage.open(io.BytesIO(binary_data))\n","\n","    # 이미지를 OpenCV 형식으로 변환\n","    cv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)\n","\n","    # 이미지 표시\n","    display(HTML(\"<h3>촬영된 이미지</h3>\"))\n","    display(image)\n","\n","    return cv_image, binary_data\n","\n","# 파일 업로드\n","def upload_image():\n","    uploaded = files.upload()\n","    file_name = next(iter(uploaded))\n","    file_data = uploaded[file_name]\n","\n","    # 업로드된 이미지를 OpenCV로 열기\n","    nparr = np.frombuffer(file_data, np.uint8)\n","    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\n","\n","    # 이미지 표시\n","    pil_img = PILImage.open(io.BytesIO(file_data))\n","    display(HTML(\"<h3>업로드된 이미지</h3>\"))\n","    display(pil_img)\n","\n","    return img, file_data\n","\n","# 결과 표시\n","def display_result(result):\n","    # 결과 텍스트를 HTML로 변환하여 보기 좋게 표시\n","    formatted_text = result.replace('\\n', '<br>')\n","\n","    # 중요 경고 문구 강조\n","    formatted_text = re.sub(r'(주의|경고|위험|금기|부작용)', r'<span style=\"color: #FF6B6B; font-weight: bold; text-decoration: underline;\">\\1</span>', formatted_text)\n","\n","    # 음식과 약물 상호작용 부분 강조\n","    formatted_text = formatted_text.replace('음식 목록', '<span style=\"color: #FFD700; font-weight: bold; font-size: 18px;\">음식 목록</span>')\n","    formatted_text = formatted_text.replace('약물 목록', '<span style=\"color: #7FFFD4; font-weight: bold; font-size: 18px;\">약물 목록</span>')\n","\n","    # 제목과 섹션을 더 강조\n","    formatted_text = re.sub(r'([\\d]+\\.\\s+[^:]+):', r'<span style=\"color: #FFA07A; font-weight: bold; font-size: 18px; text-shadow: 1px 1px 1px #000;\">\\1:</span>', formatted_text)\n","\n","    # 약품 이름이나 성분명 강조\n","    formatted_text = re.sub(r'([가-힣a-zA-Z]+\\([가-힣a-zA-Z ]+\\))', r'<span style=\"color: #98FB98; font-weight: bold;\">\\1</span>', formatted_text)\n","\n","    display(HTML(f\"\"\"\n","    <div style=\"background-color: #1e3a5f; padding: 20px; border-radius: 10px; border: 1px solid #0c1e2f; color: white; box-shadow: 0 4px 8px rgba(0,0,0,0.2);\">\n","        <h2 style=\"color: #4ecdc4; text-align: center; margin-bottom: 20px; font-size: 24px; text-shadow: 1px 1px 2px #000;\">의약품 상호작용 분석 결과</h2>\n","        <div style=\"margin-top: 15px; font-size: 16px; line-height: 1.6;\">\n","            {formatted_text}\n","        </div>\n","    </div>\n","    \"\"\"))\n","\n","# 필요한 패키지 설치\n","def setup_environment():\n","    print(\"필요한 패키지를 설치합니다...\")\n","    try:\n","        # 대부분의 패키지는 이미 Colab에 설치되어 있음\n","        # OpenCV, Numpy, PIL 등은 기본 설치\n","        # 추가 패키지가 필요하면 여기에 추가\n","        print(\"패키지 설치가 완료되었습니다.\")\n","    except Exception as e:\n","        print(f\"패키지 설치 중 오류 발생: {e}\")\n","\n","# API 활성화 안내 표시\n","def show_api_activation_guide():\n","    display(HTML(\"\"\"\n","    <div style=\"background-color: #fff3cd; padding: 15px; border-radius: 8px; border: 1px solid #ffeeba; margin-bottom: 20px;\">\n","        <h3 style=\"color: #856404; margin-top: 0;\">Gemini API 활성화 안내</h3>\n","        <p>처음 Gemini API를 사용할 때는 Google Cloud Console에서 API를 활성화해야 합니다:</p>\n","        <ol>\n","            <li>아래 링크에 접속하세요:<br>\n","            <a href=\"https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com\" target=\"_blank\">\n","            https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com</a></li>\n","            <li>해당 프로젝트를 선택하고 'API 사용 설정' 버튼을 클릭하세요.</li>\n","            <li>API 활성화가 완료되면 몇 분 후에 다시 시도해보세요. (API 활성화가 시스템에 전파되는 데 시간이 걸릴 수 있습니다.)</li>\n","        </ol>\n","    </div>\n","    \"\"\"))\n","\n","# 메인 함수\n","def main():\n","    print(\"의약품 상호작용 분석 프로그램을 시작합니다.\")\n","\n","    # 환경 설정\n","    setup_environment()\n","\n","    # API 활성화 안내\n","    show_api_activation_guide()\n","\n","    # Gemini API 설정\n","    api_key = setup_gemini_api()\n","    if not api_key:\n","        print(\"API 키 설정에 실패했습니다. 프로그램을 종료합니다.\")\n","        return\n","\n","    # 사용자 선택\n","    choice = input(\"이미지 입력 방법을 선택하세요 (1: 파일 업로드): \")\n","\n","    if choice == '1':\n","        image, image_data = upload_image()\n","    else:\n","        print(\"잘못된 선택입니다. 프로그램을 종료합니다.\")\n","        return\n","\n","    # 의약품 이름 입력 (옵션)\n","    medicine_name = input(\"의약품 이름을 알고 있다면 입력하세요 (모르면 그냥 엔터): \")\n","    if medicine_name.strip() == '':\n","        medicine_name = None\n","\n","    print(\"이미지를 분석 중입니다. 잠시만 기다려주세요...\")\n","\n","    # 의약품 분석\n","    result = analyze_with_gemini(api_key, image_data, medicine_name)\n","\n","    # 결과 표시\n","    display_result(result)\n","\n","    print(\"분석이 완료되었습니다.\")\n","\n","# 프로그램 실행\n","if __name__ == \"__main__\":\n","    main()"]}]}