{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/ndb796/PyTorch-Neural-Image-Caption-Generator/blob/main/Neural_Image_Captioning_(NIC)_using_ResNet_101.ipynb","timestamp":1683508833892}],"collapsed_sections":["PmugZ_i_IIcD"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"PmugZ_i_IIcD"},"source":["#### <b>[코드 구현] Show and Tell: A Neural Image Caption Generator (CVPR 2015)\n","\n","---\n","\n","</b>\n","* 본 소스코드는 원본 논문에서 제안한 아키텍처를 최대한 따르고 있습니다.\n","* CNN 아키텍처로 ResNet-101을 사용합니다.\n","* 학습용 데이터셋: <b>Flickr8k</b>\n","* 참고 소스코드: [yunjey](https://github.com/yunjey/pytorch-tutorial/tree/master/tutorials/03-advanced/image_captioning)"]},{"cell_type":"markdown","metadata":{"id":"GBjl7hG9cSp8"},"source":["#### <b>Flickr8k 데이터셋 다운로드</b>\n","\n","* Flickr8k 데이터셋 다운로드 및 압축 해제"]},{"cell_type":"code","metadata":{"id":"kS2lBamDqI7F","executionInfo":{"status":"ok","timestamp":1709119869445,"user_tz":-540,"elapsed":21285,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e1961603-2ca4-4859-8f1b-f453a1756909"},"source":["!wget https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/EXVy7_7pF5FIsPp6WfXXfWgBNfUKx8N1VrTisN8FbGYG9w?download=1 -O Flickr8k_dataset.zip"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-02-28 11:30:48--  https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/EXVy7_7pF5FIsPp6WfXXfWgBNfUKx8N1VrTisN8FbGYG9w?download=1\n","Resolving postechackr-my.sharepoint.com (postechackr-my.sharepoint.com)... 13.107.136.10, 13.107.138.10, 2620:1ec:8f8::10, ...\n","Connecting to postechackr-my.sharepoint.com (postechackr-my.sharepoint.com)|13.107.136.10|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: /personal/dongbinna_postech_ac_kr/Documents/Research/datasets/Flickr8k_dataset.zip?ga=1 [following]\n","--2024-02-28 11:30:49--  https://postechackr-my.sharepoint.com/personal/dongbinna_postech_ac_kr/Documents/Research/datasets/Flickr8k_dataset.zip?ga=1\n","Reusing existing connection to postechackr-my.sharepoint.com:443.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1112971163 (1.0G) [application/x-zip-compressed]\n","Saving to: ‘Flickr8k_dataset.zip’\n","\n","Flickr8k_dataset.zi 100%[===================>]   1.04G  72.8MB/s    in 19s     \n","\n","2024-02-28 11:31:09 (54.5 MB/s) - ‘Flickr8k_dataset.zip’ saved [1112971163/1112971163]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"V6fzkhRPrU8Q","executionInfo":{"status":"ok","timestamp":1709119893573,"user_tz":-540,"elapsed":11909,"user":{"displayName":"주경재","userId":"06324618118387309270"}}},"source":["%%capture\n","!unzip Flickr8k_dataset.zip -d ./Flickr8k_dataset"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NS6O9OiHgJNP"},"source":["#### <b>필요한 버전의 라이브러리 설치</b>\n","\n","* BLEU Score 계산을 위해 라이브러리 재설치"]},{"cell_type":"code","metadata":{"id":"Fyo5IeXwgMkh","executionInfo":{"status":"ok","timestamp":1709119907893,"user_tz":-540,"elapsed":7305,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"314b9d62-c429-4723-8df4-c328c42a648f"},"source":["!pip install torchtext==0.6.0"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting torchtext==0.6.0\n","  Downloading torchtext-0.6.0-py3-none-any.whl (64 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/64.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.2/64.2 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (4.66.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (2.31.0)\n","Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (2.1.0+cu121)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (1.25.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (1.16.0)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.10/dist-packages (from torchtext==0.6.0) (0.1.99)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torchtext==0.6.0) (2024.2.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.13.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (4.9.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (1.12)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.2.1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (3.1.3)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (2023.6.0)\n","Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch->torchtext==0.6.0) (2.1.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->torchtext==0.6.0) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->torchtext==0.6.0) (1.3.0)\n","Installing collected packages: torchtext\n","  Attempting uninstall: torchtext\n","    Found existing installation: torchtext 0.16.0\n","    Uninstalling torchtext-0.16.0:\n","      Successfully uninstalled torchtext-0.16.0\n","Successfully installed torchtext-0.6.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"k0tegtLd0Jkv"},"source":["#### <b>이미지 크기 조정(Resize)</b>\n","\n","* 데이터셋에 포함된 모든 이미지의 크기를 조정합니다."]},{"cell_type":"code","metadata":{"id":"tY_FuJbzxB57","executionInfo":{"status":"ok","timestamp":1684100232958,"user_tz":-540,"elapsed":102722,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"99f0afaa-5935-47ef-8bfe-866e38934edd"},"source":["import os\n","from PIL import Image\n","import torch\n","import torch.nn as nn\n","import torchvision.models as models\n","from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence\n","\n","\n","image_dir = \"./Flickr8k_dataset/Images\" # 원본 이미지 파일 경로\n","train_image_dir = \"./resized_train/images\" # 크기가 조정된 이미지가 담길 경로 (학습)\n","val_image_dir = \"./resized_val/images\" # 크기가 조정된 이미지가 담길 경로 (평가)\n","test_image_dir = \"./resized_test/images\" # 크기가 조정된 이미지가 담길 경로 (테스트)\n","size = [256, 256] # 조정될 이미지 크기\n","\n","\n","def resize_image(image, size):\n","    # 이미지를 특정 크기로 조정\n","    return image.resize(size, Image.ANTIALIAS)\n","\n","# image_dir 내부에 있는 모든 이미지의 크기를 바꾸어 결과 폴더로 옮기기\n","if not os.path.exists(train_image_dir):\n","    os.makedirs(train_image_dir)\n","if not os.path.exists(val_image_dir):\n","    os.makedirs(val_image_dir)\n","if not os.path.exists(test_image_dir):\n","    os.makedirs(test_image_dir)\n","\n","images = sorted(os.listdir(image_dir)) # 이미지와 캡션 모두 파일 이름별로 정렬해서 매칭\n","num_images = len(images)\n","num_train_images = 6000 # 6000개는 학습용 데이터로 이용\n","num_val_images = 1000 # 1000개는 평가용 데이터로 이용\n","\n","for i, image in enumerate(images):\n","    if (i + 1) <= num_train_images:\n","        output_dir = train_image_dir\n","    elif (i + 1) <= num_train_images + num_val_images:\n","        output_dir = val_image_dir\n","    else:\n","        output_dir = test_image_dir\n","    with open(os.path.join(image_dir, image), 'rb+') as f:\n","        with Image.open(f) as img:\n","            img = resize_image(img, size)\n","            img.save(os.path.join(output_dir, image), img.format)\n","    if (i + 1) % 500 == 0:\n","        print(f\"[{i + 1}/{num_images}] Resized the images and saved into '{output_dir}'\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[500/8091] Resized the images and saved into './resized_train/images'\n","[1000/8091] Resized the images and saved into './resized_train/images'\n","[1500/8091] Resized the images and saved into './resized_train/images'\n","[2000/8091] Resized the images and saved into './resized_train/images'\n","[2500/8091] Resized the images and saved into './resized_train/images'\n","[3000/8091] Resized the images and saved into './resized_train/images'\n","[3500/8091] Resized the images and saved into './resized_train/images'\n","[4000/8091] Resized the images and saved into './resized_train/images'\n","[4500/8091] Resized the images and saved into './resized_train/images'\n","[5000/8091] Resized the images and saved into './resized_train/images'\n","[5500/8091] Resized the images and saved into './resized_train/images'\n","[6000/8091] Resized the images and saved into './resized_train/images'\n","[6500/8091] Resized the images and saved into './resized_val/images'\n","[7000/8091] Resized the images and saved into './resized_val/images'\n","[7500/8091] Resized the images and saved into './resized_test/images'\n","[8000/8091] Resized the images and saved into './resized_test/images'\n"]}]},{"cell_type":"markdown","metadata":{"id":"R_kamUzwx71P"},"source":["#### <b>캡션을 이용해 Vocabulary 만들기</b>\n","\n","* 현재의 Flickr8k_dataset에 <b>총 8,091개의 이미지</b>가 포함되어 있습니다.\n","* 이미지마다 5개의 캡션이 붙어 있으므로 <b>총 40,455개의 문장</b>이 존재합니다."]},{"cell_type":"code","metadata":{"id":"ifcomEM_rJ3C","executionInfo":{"status":"ok","timestamp":1684100245540,"user_tz":-540,"elapsed":7409,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f8dfaa44-d4c1-4a79-99f0-62040291112b"},"source":["import pickle\n","import nltk\n","from collections import Counter\n","\n","nltk.download('punkt')\n","\n","caption_path = \"./Flickr8k_dataset/captions.txt\" # 원본 캡션(caption) 파일\n","vocab_path = \"./vocab.pkl\" # 단어 사전 결과 파일\n","word_threshold = 4 # 최소 단어 등장 횟수\n","train_caption_path = \"./resized_train/captions.txt\" # 크기가 조정된 이미지의 캡션(caption)이 담길 경로 (학습)\n","val_caption_path = \"./resized_val/captions.txt\" # 크기가 조정된 이미지의 캡션(caption)이 담길 경로 (평가)\n","test_caption_path = \"./resized_test/captions.txt\" # 크기가 조정된 이미지의 캡션(caption)이 담길 경로 (테스트)\n","\n","\n","class Vocabulary(object):\n","    \"\"\"Simple vocabulary wrapper.\"\"\"\n","    def __init__(self):\n","        self.word2idx = {}\n","        self.idx2word = {}\n","        self.idx = 0\n","\n","    def add_word(self, word):\n","        if not word in self.word2idx:\n","            self.word2idx[word] = self.idx\n","            self.idx2word[self.idx] = word\n","            self.idx += 1\n","\n","    def __call__(self, word):\n","        if not word in self.word2idx:\n","            return self.word2idx['<unk>']\n","        return self.word2idx[word]\n","\n","    def __len__(self):\n","        return len(self.word2idx)\n","\n","counter = Counter()\n","\n","with open(caption_path, \"r\") as f:\n","    lines = sorted(f.readlines()[1:])\n","    for i in range(len(lines)):\n","        line = lines[i]\n","        if (i + 1) <= num_train_images * 5: # 이미지당 캡션이 5개씩 존재\n","            output_caption = train_caption_path\n","        elif (i + 1) <= (num_train_images + num_val_images) * 5:\n","            output_caption = val_caption_path\n","        else:\n","            output_caption = test_caption_path\n","        index = line.find(\",\") # 캡션(caption) 문자열의 시작점 찾기\n","        caption = line[index + 1:] # 캡션(caption) 문자열 기록\n","        tokens = nltk.tokenize.word_tokenize(caption.lower()) # 문자열 토큰화\n","        counter.update(tokens) # 각 토큰의 개수 세기\n","        with open(output_caption, \"a\") as output_caption_f:\n","            output_caption_f.write(line)\n","\n","# 단어의 빈도수가 특정 임계치(threshold) 이상인 경우에만 사용\n","words = [word for word, cnt in counter.items() if cnt >= word_threshold]\n","\n","# Vocabulary 객체 생성\n","vocab = Vocabulary()\n","vocab.add_word('<pad>')\n","vocab.add_word('<start>')\n","vocab.add_word('<end>')\n","vocab.add_word('<unk>') # unknown 토큰\n","\n","# Vocabulary 객체에 모든 단어를 담기\n","for word in words:\n","    vocab.add_word(word)\n","\n","# Vocabulary 파일 저장\n","with open(vocab_path, 'wb') as f:\n","    pickle.dump(vocab, f)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n"]}]},{"cell_type":"code","metadata":{"id":"agqO7u_nLIyW","executionInfo":{"status":"ok","timestamp":1684100251362,"user_tz":-540,"elapsed":629,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6dedfbc5-ac10-4a33-e364-23221c9b5aa8"},"source":["# 학습(train) 데이터셋의 캡션 수\n","!wc -l ./resized_train/captions.txt\n","# 평가(val) 데이터셋의 캡션 수\n","!wc -l ./resized_val/captions.txt\n","# 테스트(test) 데이터셋의 캡션 수\n","!wc -l ./resized_test/captions.txt"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["30000 ./resized_train/captions.txt\n","5000 ./resized_val/captions.txt\n","5455 ./resized_test/captions.txt\n"]}]},{"cell_type":"markdown","metadata":{"id":"RtlepWmU4J3o"},"source":["#### <b>커스텀 데이터셋 클래스 정의</b>\n","\n","* Flickr8kDataset 클래스를 정의합니다."]},{"cell_type":"code","metadata":{"id":"OENa8v-W4JiB"},"source":["import torch.utils.data as data\n","\n","\n","# Flickr8k 데이터셋 클래스 정의\n","class Flickr8kDataset(data.Dataset):\n","    def __init__(self, root, captions, vocab, transform=None):\n","        self.root = root # 이미지가 존재하는 경로\n","        with open(captions, \"r\") as f:\n","             lines = f.readlines()\n","             self.captions = [] # 캡션(caption) 정보를 담을 리스트\n","             for line in lines: # 첫 번째 줄부터 바로 캡션 정보 존재\n","                index = line.find(\",\") # 캡션(caption) 문자열의 시작점 찾기\n","                path = line[:index] # 이미지 파일 이름\n","                caption = line[index + 1:] # 캡션(caption) 문자열 기록\n","                self.captions.append((path, caption))\n","        self.vocab = vocab\n","        self.transform = transform\n","\n","    # 이미지와 캡션(caption)을 하나씩 꺼내는 메서드\n","    def __getitem__(self, index):\n","        vocab = self.vocab\n","        path = self.captions[index][0]\n","        caption = self.captions[index][1]\n","\n","        image = Image.open(os.path.join(self.root, path)).convert('RGB')\n","        if self.transform is not None:\n","            image = self.transform(image)\n","\n","        # 캡션(caption) 문자열을 토큰 형태로 바꾸기\n","        tokens = nltk.tokenize.word_tokenize(str(caption).lower())\n","        caption = []\n","        caption.append(vocab('<start>'))\n","        caption.extend([vocab(token) for token in tokens])\n","        caption.append(vocab('<end>'))\n","        target = torch.Tensor(caption)\n","        return image, target\n","\n","    def __len__(self):\n","        return len(self.captions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AtPrZqvr7yUJ"},"source":["# 이미지와 캡션(caption)으로 구성된 튜플을 배치(batch)로 만들기\n","def collate_fn(data):\n","    \"\"\"\n","    [입력]\n","    * data: list of tuple (image, caption).\n","        * image: torch tensor of shape (3, 256, 256).\n","        * caption: torch tensor of shape (?); variable length.\n","    [출력]\n","    * images: torch tensor of shape (batch_size, 3, 256, 256).\n","    * targets: torch tensor of shape (batch_size, padded_length).\n","    * lengths: list; valid length for each padded caption.\n","    \"\"\"\n","    # Caption 길이로 각 데이터를 내림차순 정렬\n","    data.sort(key=lambda x: len(x[1]), reverse=True)\n","    images, captions = zip(*data)\n","    # 리스트 형태의 이미지들을 텐서 하나로 합치기(데이터 개수, 3, 256, 256)\n","    images = torch.stack(images, 0)\n","    # 리스트 형태의 캡션들을 텐서 하나로 합치기(데이터 개수, 문장 내 최대 토큰 개수)\n","    lengths = [len(caption) for caption in captions]\n","    targets = torch.zeros(len(captions), max(lengths)).long()\n","    # 하나씩 캡션을 확인하며 앞 부분의 내용을 패딩이 아닌 원래 토큰으로 채우기\n","    for i, cap in enumerate(captions):\n","        end = lengths[i]\n","        targets[i, :end] = cap[:end]\n","    return images, targets, lengths\n","def collate_fn_test(data):\n","    # 기존 순서를 그대로 사용 (차례대로 5개씩 같은 이미지를 표현)\n","    images, captions = zip(*data)\n","    # 리스트 형태의 이미지들을 텐서 하나로 합치기(데이터 개수, 3, 256, 256)\n","    images = torch.stack(images, 0)\n","    # 리스트 형태의 캡션들을 텐서 하나로 합치기(데이터 개수, 문장 내 최대 토큰 개수)\n","    lengths = [len(caption) for caption in captions]\n","    targets = torch.zeros(len(captions), max(lengths)).long()\n","    # 하나씩 캡션을 확인하며 앞 부분의 내용을 패딩이 아닌 원래 토큰으로 채우기\n","    for i, cap in enumerate(captions):\n","        end = lengths[i]\n","        targets[i, :end] = cap[:end]\n","    return images, targets, lengths\n","# 커스텀 Flickr8k 데이터셋을 위한 DataLoader 객체 반환\n","def get_loader(root, captions, vocab, transform, batch_size, shuffle, num_workers, testing):\n","    flickr8k = Flickr8kDataset(root=root, captions=captions, vocab=vocab, transform=transform)\n","    # This will return (images, captions, lengths) for each iteration.\n","    # images: a tensor of shape (batch_size, 3, 224, 224).\n","    # captions: a tensor of shape (batch_size, padded_length).\n","    # lengths: a list indicating valid length for each caption. length is (batch_size).\n","    if not testing:\n","        data_loader = torch.utils.data.DataLoader(dataset=flickr8k, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers, collate_fn=collate_fn)\n","    else:\n","        data_loader = torch.utils.data.DataLoader(dataset=flickr8k, batch_size=batch_size, shuffle=shuffle, num_workers=num_workers, collate_fn=collate_fn_test)\n","    return data_loader"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eRqv_RUS1oK4"},"source":["#### <b>모델 정의</b>\n","\n","* 학습을 위한 Encoder 및 Decoder 모델을 정의합니다.\n","* 본 실습에서는 <b>사전 학습된(pre-trained) ResNet-101 모델</b>을 CNN으로 사용합니다."]},{"cell_type":"code","metadata":{"id":"jP1hkjJt1qKo","executionInfo":{"status":"error","timestamp":1684100264908,"user_tz":-540,"elapsed":956,"user":{"displayName":"주경재","userId":"06324618118387309270"}},"colab":{"base_uri":"https://localhost:8080/","height":251},"outputId":"42d9ea33-b7c9-4feb-f875-258d58c495f1"},"source":["import torch.nn.functional as F\n","import torch\n","import torch.nn as nn\n","import torchvision.models as models\n","from torch.nn.utils.rnn import pack_padded_sequence, pad_packed_sequence\n","\n","\n","# Modify the EncoderCNN class\n","class EncoderCNN(nn.Module):\n","    def __init__(self, embed_size):\n","        super(EncoderCNN, self).__init__()\n","        resnet = models.resnet50(pretrained=True)\n","        modules = list(resnet.children())[:-1]\n","        self.resnet = nn.Sequential(*modules)\n","        self.linear = nn.Linear(resnet.fc.in_features, embed_size)\n","\n","    def forward(self, images):\n","        features = self.resnet(images)\n","        features = features.reshape(features.size(0), -1)\n","        features = self.linear(features)\n","        return features\n","\n","\n","# Create the Encoder instance\n","encoder = EncoderCNN(embed_size).to(device)\n","\n","# Create the Decoder instance\n","decoder = DecoderRNN(embed_size, hidden_size, len(vocab), num_layers, attention_dim).to(device)\n","\n","\n","class Attention(nn.Module):\n","    def __init__(self, encoder_dim, decoder_dim, attention_dim):\n","        super(Attention, self).__init__()\n","        self.encoder_dim = encoder_dim\n","        self.decoder_dim = decoder_dim\n","        self.attention_dim = attention_dim\n","        self.W = nn.Linear(decoder_dim, attention_dim)\n","        self.U = nn.Linear(encoder_dim, attention_dim)\n","        self.V = nn.Linear(attention_dim, 1)\n","\n","def forward(self, features, hidden):\n","    hidden_transformed = self.W(hidden)\n","    att = torch.matmul(hidden_transformed, features.transpose(1, 2))\n","    alpha = F.softmax(att, dim=2)\n","    attention_weighted_encoding = torch.matmul(alpha, features).squeeze(1)\n","    return attention_weighted_encoding, alpha\n","\n","\n","class DecoderRNN(nn.Module):\n","    def __init__(self, embed_size, hidden_size, vocab_size, num_layers, attention_dim):\n","        super(DecoderRNN, self).__init__()\n","        self.hidden_size = hidden_size\n","        self.embed = nn.Embedding(vocab_size, embed_size)\n","        self.attention = Attention(hidden_size, embed_size, attention_dim)\n","        self.lstm = nn.LSTMCell(embed_size + hidden_size, hidden_size)\n","        self.fc = nn.Linear(hidden_size, vocab_size)\n","        self.dropout = nn.Dropout(p=0.5)\n","\n","    def forward(self, features, captions, lengths):\n","        batch_size = features.size(0)\n","        hidden_state = self.init_hidden_state(batch_size).to(features.device)\n","        cell_state = self.init_cell_state(batch_size).to(features.device)\n","\n","        embeddings = self.embed(captions)\n","        outputs = []\n","\n","        for t in range(max(lengths)):\n","            batch_size_t = sum([l > t for l in lengths])  # Dynamic batch size at current timestep\n","\n","            attention_weighted_encoding, alpha = self.attention(features[:batch_size_t], hidden_state[:batch_size_t])\n","            lstm_input = torch.cat((embeddings[:batch_size_t, t, :], attention_weighted_encoding), dim=1)\n","\n","            hidden_state, cell_state = self.lstm(lstm_input, (hidden_state[:batch_size_t], cell_state[:batch_size_t]))\n","            outputs.append(self.fc(self.dropout(hidden_state)))\n","\n","        outputs = torch.cat(outputs, dim=0)\n","        return outputs\n","\n","    def init_hidden_state(self, batch_size):\n","        return torch.zeros(batch_size, self.hidden_size)\n","\n","    def init_cell_state(self, batch_size):\n","        return torch.zeros(batch_size, self.hidden_size)\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-364f23be07cb>\u001b[0m in \u001b[0;36m<cell line: 25>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Create the Encoder instance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mencoder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mEncoderCNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membed_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# Create the Decoder instance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'embed_size' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"q_fYBqI9U4pa"},"source":["#### <b>학습 및 평가 준비하기</b>\n","\n","* 학습 및 평가를 준비합니다."]},{"cell_type":"code","metadata":{"id":"jQeUwfzxU9bT"},"source":["import torch\n","from torch.nn.utils.rnn import pack_padded_sequence\n","from torchvision import transforms\n","\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","model_path = \"models/\" # 학습된 모델이 저장될 경로\n","crop_size = 224 # 랜덤하게 잘라낼 이미지 크기\n","vocab_path = \"./vocab.pkl\" # 전처리된 Vocabulary 파일 경로\n","\n","# 모델 디렉토리 만들기\n","if not os.path.exists(model_path):\n","    os.makedirs(model_path)\n","\n","# Vocabulary 파일 불러오기\n","with open(vocab_path, 'rb') as f:\n","    vocab = pickle.load(f)\n","\n","# 사전 학습된(pre-trained) ResNet에 적용된 전처리 및 정규화 파라미터를 그대로 사용합니다.\n","train_transform = transforms.Compose([\n","    transforms.RandomCrop(crop_size),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])\n","\n","val_transform = transforms.Compose([\n","    transforms.Resize(crop_size),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])\n","\n","test_transform = transforms.Compose([\n","    transforms.Resize(crop_size),\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])\n","\n","batch_size = 128\n","num_workers = 2\n","\n","# 데이터 로더(data loader) 선언\n","train_data_loader = get_loader(train_image_dir, train_caption_path, vocab, train_transform, batch_size, shuffle=True, num_workers=num_workers, testing=False)\n","val_data_loader = get_loader(val_image_dir, val_caption_path, vocab, val_transform, batch_size, shuffle=False, num_workers=num_workers, testing=False)\n","test_data_loader = get_loader(test_image_dir, test_caption_path, vocab, test_transform, batch_size, shuffle=False, num_workers=num_workers, testing=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UIBQ-YoG1Pyr"},"source":["# 모델 하이퍼 파라미터 설정\n","embed_size = 256 # 임베딩(embedding) 차원\n","hidden_size = 512 # LSTM hidden states 차원\n","num_layers = 1 # LSTM의 레이어 개수\n","\n","# 모델 객체 선언\n","# Create the Encoder instance\n","encoder = EncoderCNN(2048).to(device)\n","\n","# Determine the embed_size based on the Encoder output size\n","encoder_output_size = 2048  # Output size of the ResNet-101 model\n","embed_size = encoder_output_size\n","\n","# Define attention_dim\n","attention_dim = 256\n","\n","# Create the Decoder instance\n","decoder = DecoderRNN(embed_size, hidden_size, len(vocab), num_layers, attention_dim).to(device)\n","\n","# Create the Attention instance\n","attention = Attention(hidden_size, embed_size, attention_dim)\n","\n","\n","num_epochs = 5\n","learning_rate = 0.001\n","\n","log_step = 20 # 로그를 출력할 스텝(step)\n","save_step = 1000 # 학습된 모델을 저장할 스텝(step)\n","\n","# 손실(loss) 및 최적화 함수 선언\n","criterion = nn.CrossEntropyLoss()\n","params = list(decoder.parameters()) + list(encoder.linear.parameters())\n","optimizer = torch.optim.Adam(params, lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lsLJ839BIVrT"},"source":["#### <b>학습 진행</b>\n","\n","* 전체 학습 과정에서 <b>약 15분~30분</b>이 소요됩니다."]},{"cell_type":"code","metadata":{"id":"sCPwRexz3dJZ","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"e7b5b787-d426-45de-fed9-61a6963fb753","executionInfo":{"status":"error","timestamp":1684069839496,"user_tz":-540,"elapsed":2056,"user":{"displayName":"주경재","userId":"06324618118387309270"}}},"source":["import time\n","import numpy as np\n","\n","start_time = time.time()  # Overall training time measurement\n","\n","# Model training\n","for epoch in range(num_epochs):\n","\n","    # Training phase\n","    print(\"[ Training ]\")\n","    total_loss = 0\n","    total_count = 0\n","    total_step = len(train_data_loader)\n","    for i, (images, captions, lengths) in enumerate(train_data_loader):\n","        images = images.to(device)\n","        captions = captions.to(device)\n","        targets = pack_padded_sequence(captions, lengths, batch_first=True)[0]\n","\n","        features = encoder(images)\n","        outputs = decoder(features, captions, lengths)\n","        loss = criterion(outputs.reshape(-1, len(vocab)), targets)\n","        decoder.zero_grad()\n","        encoder.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","\n","        # Log printing\n","        if i % print_every == 0:\n","            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}, Perplexity: {:5.4f}'\n","                  .format(epoch, num_epochs, i, total_step, loss.item(), np.exp(loss.item())))\n","\n","        # Model saving\n","        if (i + 1) % save_every == 0:\n","            torch.save(decoder.state_dict(), os.path.join(model_path, 'decoder-{}-{}.ckpt'.format(epoch + 1, i + 1)))\n","            torch.save(encoder.state_dict(), os.path.join(model_path, 'encoder-{}-{}.ckpt'.format(epoch + 1, i + 1)))\n","\n","    # Validation phase after training\n","    print(\"[ Validation ]\")\n","    total_loss = 0\n","    total_count = 0\n","    total_step = len(val_data_loader)\n","    with torch.no_grad():\n","        for i, (images, captions, lengths) in enumerate(val_data_loader):\n","            images = images.to(device)\n","            captions = captions.to(device)\n","            targets = pack_padded_sequence(captions, lengths, batch_first=True)[0]\n","\n","            # Forward pass\n","            features = encoder(images)\n","            outputs = decoder(features, captions, lengths)\n","            loss = criterion(outputs.reshape(-1, len(vocab)), targets)\n","\n","            # Computing loss\n","            total_loss += loss.item()\n","            total_count += images.shape[0]\n","\n","            # Log information printing\n","            if i % log_step == 0:\n","                print('Epoch [{}/{}], Step [{}/{}], Average Loss: {:.4f}, Perplexity: {:5.4f}, Elapsed time: {:.4f}s'\n","                      .format(epoch, num_epochs, i, total_step, total_loss / total_count, np.exp(loss.item()),\n","                              time.time() - start_time))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[ Training ]\n"]},{"output_type":"error","ename":"OutOfMemoryError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOutOfMemoryError\u001b[0m                          Traceback (most recent call last)","\u001b[0;32m<ipython-input-140-e6c099335a74>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mtargets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpack_padded_sequence\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcaptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_first\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mencoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecoder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvocab\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtargets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-137-364f23be07cb>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, images)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresnet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mfeatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torchvision/models/resnet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownsample\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 158\u001b[0;31m             \u001b[0midentity\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdownsample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0midentity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 463\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    464\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    465\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mConv3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_ConvNd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    457\u001b[0m                             \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m                             _pair(0), self.dilation, self.groups)\n\u001b[0;32m--> 459\u001b[0;31m         return F.conv2d(input, weight, bias, self.stride,\n\u001b[0m\u001b[1;32m    460\u001b[0m                         self.padding, self.dilation, self.groups)\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOutOfMemoryError\u001b[0m: CUDA out of memory. Tried to allocate 392.00 MiB (GPU 0; 14.75 GiB total capacity; 12.89 GiB already allocated; 88.81 MiB free; 13.57 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF"]}]},{"cell_type":"code","metadata":{"id":"SkWwxEm_iOC8"},"source":["# 학습된 모델 저장\n","from google.colab import files\n","\n","files.download('models/encoder-5.ckpt')\n","files.download('models/decoder-5.ckpt')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nq9PIqIyTE26"},"source":["#### <b>결과 확인</b>\n","\n","* 평가 데이터셋 중 하나의 이미지를 골라 학습된 모델을 이용하여 결과를 확인합니다."]},{"cell_type":"code","metadata":{"id":"iefQO5jMibUa"},"source":["!wget https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/ERnDZFI8KD9OrX8rZGB4zucBLL1C2OQl5zdEIj9M23VH8A?download=1 -O nic_encoder_ResNet101.ckpt\n","!wget https://postechackr-my.sharepoint.com/:u:/g/personal/dongbinna_postech_ac_kr/EfpMfIRuTy1NndX8U7C70XMBmu6wd3JofEo5T-uyIP8YOA?download=1 -O nic_decoder_ResNet101.ckpt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"V0qTKFpg81Ln"},"source":["def load_image(image_path, transform=None):\n","    image = Image.open(image_path).convert('RGB')\n","    image = image.resize([224, 224], Image.LANCZOS)\n","\n","    if transform is not None:\n","        image = transform(image).unsqueeze(0)\n","\n","    return image\n","\n","image_path = \"./resized_test/images/872622575_ba1d3632cc.jpg\" # 캡션(caption)을 생성할 입력 이미지\n","encoder_path = \"./nic_encoder_ResNet101.ckpt\" # path for trained encoder\n","decoder_path = \"./nic_decoder_ResNet101.ckpt\" # path for trained decoder\n","vocab_path = \"./vocab.pkl\" # path for vocabulary wrapper\n","\n","# Model parameters (should be same as paramters in train.py)\n","embed_size = 256 # dimension of word embedding vectors\n","hidden_size = 512 # dimension of lstm hidden states\n","num_layers = 1 # number of layers in lstm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KTmwf1jKLXSC"},"source":["# 이미지 전처리(image preprocessing)\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))])\n","\n","# Load vocabulary wrapper\n","with open(vocab_path, 'rb') as f:\n","    vocab = pickle.load(f)\n","\n","# Build models\n","encoder = EncoderCNN(embed_size).eval() # eval mode (batchnorm uses moving mean/variance)\n","decoder = Decoder(embed_size, hidden_size, len(vocab), num_layers)\n","encoder = encoder.to(device)\n","decoder = decoder.to(device)\n","\n","# Load the trained model parameters\n","encoder.load_state_dict(torch.load(encoder_path))\n","decoder.load_state_dict(torch.load(decoder_path))\n","\n","# Prepare an image\n","image = load_image(image_path, transform)\n","image_tensor = image.to(device)\n","\n","# Generate an caption from the image\n","feature = encoder(image_tensor)\n","sampled_ids = decoder.sample(feature)\n","sampled_ids = sampled_ids[0].cpu().numpy() # (1, max_seq_length) -> (max_seq_length)\n","\n","# Convert word_ids to words\n","sampled_caption = []\n","for word_id in sampled_ids: # 하나씩 단어 인덱스를 확인하며\n","    word = vocab.idx2word[word_id] # 단어 문자열로 바꾸어 삽입\n","    sampled_caption.append(word)\n","    if word == '<end>':\n","        break\n","sentence = ' '.join(sampled_caption)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iyn6oKJrAVL2"},"source":["import matplotlib.pyplot as plt\n","\n","# 이미지 및 생성된 캡션(caption) 문장 출력\n","image = Image.open(image_path)\n","plt.imshow(np.asarray(image))\n","plt.show()\n","print(sentence)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CdvToS3_TSvj"},"source":["#### <b>BLEU Score</b> 계산\n","\n","* 테스트(test) 데이터셋을 이용하여 BLEU 점수(score)를 계산합니다."]},{"cell_type":"code","metadata":{"id":"iXqOrtU2AMXO"},"source":["predictions = []\n","answers = []\n","answers_per_image = []\n","\n","total_step = len(test_data_loader)\n","cnt = 0\n","\n","with torch.no_grad():\n","    for i, (images, captions, lengths) in enumerate(test_data_loader):\n","        images = images.to(device)\n","        captions = captions.to(device)\n","\n","        # 순전파(forward) 진행\n","        features = encoder(images)\n","        sampled_ids_list = decoder.sample(features)\n","\n","        for index in range(len(images)):\n","            sampled_ids = sampled_ids_list[index].cpu().numpy()\n","\n","            # 정답 문장(answer sentences)\n","            answer = []\n","            for word_id in captions[index]: # 하나씩 단어 인덱스를 확인하며\n","                word = vocab.idx2word[word_id.item()] # 단어 문자열로 바꾸어 삽입\n","                answer.append(word)\n","                if word == '<end>':\n","                    break\n","            answers_per_image.append(answer[1:-1]) # 정답 문장을 삽입 (<sos>과 <eos>는 제외)\n","\n","            if (cnt + 1) % 5 == 0: # 이미지당 캡션이 5개씩 존재\n","                answers.append(answers_per_image) # 5개를 한꺼번에 리스트로 삽입\n","                answers_per_image = []\n","\n","                # 예측한 문장(predicted sentences)\n","                prediction = []\n","                for word_id in sampled_ids: # 하나씩 단어 인덱스를 확인하며\n","                    word = vocab.idx2word[word_id] # 단어 문자열로 바꾸어 삽입\n","                    prediction.append(word)\n","                    if word == '<end>':\n","                        break\n","                predictions.append(prediction[1:-1]) # 예측한 문장에 대해서는 1개만 삽입 (<sos>과 <eos>는 제외)\n","            cnt += 1\n","\n","        if i % log_step == 0:\n","            print(f\"[ Testing ] Batch size: {i}/{total_step}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d2r16lSYxH9V"},"source":["print(\"예측한 문장의 수:\", len(predictions))\n","print(\"정답 문장 집합의 수 (5개씩):\", len(answers))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3tURgRtA85FV"},"source":["index = 2\n","print(\"[ 정답 캡션들 ]\")\n","for answer in answers[index]:\n","    print(answer)\n","\n","print(\"[ 예측된 캡션 ]\")\n","print(predictions[index])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ADNIggoZxBaF"},"source":["from torchtext.data.metrics import bleu_score\n","\n","bleu = bleu_score(predictions, answers, max_n=4, weights=[0.25, 0.25, 0.25, 0.25])\n","print(f'Total BLEU Score = {bleu * 100:.2f}')\n","\n","individual_bleu1_score = bleu_score(predictions, answers, max_n=4, weights=[1, 0, 0, 0])\n","individual_bleu2_score = bleu_score(predictions, answers, max_n=4, weights=[0, 1, 0, 0])\n","individual_bleu3_score = bleu_score(predictions, answers, max_n=4, weights=[0, 0, 1, 0])\n","individual_bleu4_score = bleu_score(predictions, answers, max_n=4, weights=[0, 0, 0, 1])\n","\n","print(f'Individual BLEU1 score = {individual_bleu1_score * 100:.2f}')\n","print(f'Individual BLEU2 score = {individual_bleu2_score * 100:.2f}')\n","print(f'Individual BLEU3 score = {individual_bleu3_score * 100:.2f}')\n","print(f'Individual BLEU4 score = {individual_bleu4_score * 100:.2f}')\n","\n","cumulative_bleu1_score = bleu_score(predictions, answers, max_n=4, weights=[1, 0, 0, 0])\n","cumulative_bleu2_score = bleu_score(predictions, answers, max_n=4, weights=[1/2, 1/2, 0, 0])\n","cumulative_bleu3_score = bleu_score(predictions, answers, max_n=4, weights=[1/3, 1/3, 1/3, 0])\n","cumulative_bleu4_score = bleu_score(predictions, answers, max_n=4, weights=[1/4, 1/4, 1/4, 1/4])\n","\n","print(f'Cumulative BLEU1 score = {cumulative_bleu1_score * 100:.2f}')\n","print(f'Cumulative BLEU2 score = {cumulative_bleu2_score * 100:.2f}')\n","print(f'Cumulative BLEU3 score = {cumulative_bleu3_score * 100:.2f}')\n","print(f'Cumulative BLEU4 score = {cumulative_bleu4_score * 100:.2f}')"],"execution_count":null,"outputs":[]}]}