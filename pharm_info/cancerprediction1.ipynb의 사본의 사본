{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1cGLSm_PrgBEFsURPXxfGIfhx2v0rR8wx","timestamp":1679878335170}],"mount_file_id":"1cGLSm_PrgBEFsURPXxfGIfhx2v0rR8wx","authorship_tag":"ABX9TyPEmLPhYg95SXs7vl+J9EkF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"sz7YsDVwBeVw"},"outputs":[],"source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# keeps the plots in one place. calls image as static pngs\n","%matplotlib inline \n","import matplotlib.pyplot as plt # side-stepping mpl backend\n","import matplotlib.gridspec as gridspec # subplots\n","!pip install matplotlib\n","!pip install mpld3\n","import mpld3 as mpl\n","\n","#Import models from scikit learn module:\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import KFold   #For K-fold cross validation\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier, export_graphviz\n","from sklearn import metrics"]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/data.csv\",header = 0)\n","df.head()"],"metadata":{"id":"97aCV_P3BoCB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.drop('id',axis=1,inplace=True)\n","df.drop('Unnamed: 32',axis=1,inplace=True)\n","# size of the dataframe\n","len(df)"],"metadata":{"id":"vgI9AiChBr2-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.diagnosis.unique()"],"metadata":{"id":"SKRktnFIBvHk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['diagnosis'] = df['diagnosis'].map({'M':1,'B':0})\n","df.head()"],"metadata":{"id":"G-UpZvUTBxJ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()"],"metadata":{"id":"zzCEnZHhBzHR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.describe()\n","plt.hist(df['diagnosis'])\n","plt.title('Diagnosis (M=1 , B=0)')\n","plt.show()"],"metadata":{"id":"iwgXk0KTB2PP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["features_mean=list(df.columns[1:11])\n","# split dataframe into two based on diagnosis\n","dfM=df[df['diagnosis'] ==1]\n","dfB=df[df['diagnosis'] ==0]"],"metadata":{"id":"XqQ--q7YB4wc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Stack the data\n","plt.rcParams.update({'font.size': 8})\n","fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(8,10))\n","axes = axes.ravel()\n","for idx,ax in enumerate(axes):\n","    ax.figure\n","    binwidth= (max(df[features_mean[idx]]) - min(df[features_mean[idx]]))/50\n","    ax.hist([dfM[features_mean[idx]], dfB[features_mean[idx]]], bins=np.arange(min(df[features_mean[idx]]), max(df[features_mean[idx]]) + binwidth, binwidth), alpha=0.5, stacked=True, density=True, label=['M', 'B'], color=['r', 'g'])\n","    ax.legend(loc='upper right')\n","    ax.set_title(features_mean[idx])\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"5U-kZu34B_JE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["traindf, testdf = train_test_split(df, test_size = 0.3)"],"metadata":{"id":"J9KQkiR-CBMD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Generic function for making a classification model and accessing the performance. \n","# From AnalyticsVidhya tutorial\n","def classification_model(model, data, predictors, outcome):\n","  #Fit the model:\n","  model.fit(data[predictors],data[outcome])\n","  \n","  #Make predictions on training set:\n","  predictions = model.predict(data[predictors])\n","  \n","  #Print accuracy\n","  accuracy = metrics.accuracy_score(predictions,data[outcome])\n","  print(\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\n","\n","  #Perform k-fold cross-validation with 5 folds\n","  kf = KFold(data.shape[0], n_folds=5)\n","  error = []\n","  for train, test in kf:\n","    # Filter training data\n","    train_predictors = (data[predictors].iloc[train,:])\n","    \n","    # The target we're using to train the algorithm.\n","    train_target = data[outcome].iloc[train]\n","    # Training the algorithm using the predictors and target.\n","    model.fit(train_predictors, train_target)\n","    \n","    #Record error from each cross-validation run\n","    error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n","    \n","    print(\"Cross-Validation Score : %s\" % \"{0:.3%}\".format(np.mean(error)))\n","    \n","  #Fit the model again so that it can be refered outside the function:\n","  model.fit(data[predictors],data[outcome]) "],"metadata":{"id":"Mm9xq5cZCEZA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def classification_model(model, data, predictors, outcome):\n","    \n","    #Fit the model:\n","    model.fit(data[predictors],data[outcome])\n","  \n","    #Make predictions on training set:\n","    predictions = model.predict(data[predictors])\n","  \n","    #Print accuracy\n","    accuracy = metrics.accuracy_score(predictions,data[outcome])\n","    print (\"Accuracy : %s\" % \"{0:.3%}\".format(accuracy))\n","\n","    #Perform k-fold cross-validation with 5 folds\n","    kf = KFold(n_splits=5)\n","    error = []\n","    for train, test in kf.split(data):\n","        # Filter training data\n","        train_predictors = (data[predictors].iloc[train,:])\n","    \n","        # The target we're using to train the algorithm.\n","        train_target = data[outcome].iloc[train]\n","    \n","        # Training the algorithm using the predictors and target.\n","        model.fit(train_predictors, train_target)\n","    \n","        #Record error from each cross-validation run\n","        error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n"," \n","    print (\"Cross-Validation Score : %s\" % \"{0:.3%}\".format(np.mean(error)))\n","\n","    #Fit the model again so that it can be refered outside the function:\n","    model.fit(data[predictors],data[outcome])\n"],"metadata":{"id":"MR7GItucCYB1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor_var = ['radius_mean']\n","model=LogisticRegression()\n","outcome_var = 'diagnosis'\n","classification_model(model,traindf,predictor_var,outcome_var)"],"metadata":{"id":"uvGulcUNCaqB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor_var = ['radius_mean','perimeter_mean','area_mean','compactness_mean','concave points_mean']\n","model = DecisionTreeClassifier()\n","classification_model(model,traindf,predictor_var,outcome_var)"],"metadata":{"id":"cZ4HI6NFCbXP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor_var = ['radius_mean']\n","model = DecisionTreeClassifier()\n","classification_model(model,traindf,predictor_var,outcome_var)"],"metadata":{"id":"oTMtYOxaCeqs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Use all the features of the nucleus\n","predictor_var = features_mean\n","model = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7, max_features=2)\n","classification_model(model, traindf,predictor_var,outcome_var)"],"metadata":{"id":"Hnr5rX49CiHW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Create a series with feature importances:\n","featimp = pd.Series(model.feature_importances_, index=predictor_var).sort_values(ascending=False)\n","print(featimp)"],"metadata":{"id":"sTsuHBFgCnGD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Using top 5 features\n","predictor_var = ['concave points_mean','area_mean','radius_mean','perimeter_mean','concavity_mean',]\n","model = RandomForestClassifier(n_estimators=100, min_samples_split=25, max_depth=7, max_features=2)\n","classification_model(model,traindf,predictor_var,outcome_var)"],"metadata":{"id":"IO5U3qsyCp9z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predictor_var =  ['radius_mean']\n","model = RandomForestClassifier(n_estimators=100)\n","classification_model(model, traindf,predictor_var,outcome_var)"],"metadata":{"id":"PkgeSLDWCr09"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Use all the features of the nucleus\n","predictor_var = features_mean\n","model = RandomForestClassifier(n_estimators=100,min_samples_split=25, max_depth=7, max_features=2)\n","classification_model(model, testdf,predictor_var,outcome_var)"],"metadata":{"id":"y8KMaPW3Cxhs"},"execution_count":null,"outputs":[]}]}