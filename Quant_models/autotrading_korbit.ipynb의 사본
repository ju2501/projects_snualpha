{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"oQciRT6rNoHC"},"outputs":[],"source":["!pip install requests pandas numpy"]},{"cell_type":"code","source":["import requests\n","import time\n","import pandas as pd\n","import numpy as np\n","import json\n","import hmac\n","import hashlib\n","import urllib.parse\n","from datetime import datetime\n","import base64\n","\n","class KorbitTrader:\n","    def __init__(self, api_key, api_secret):\n","        self.api_key = api_key\n","        self.api_secret = api_secret\n","        self.base_url = \"https://api.korbit.co.kr\"\n","\n","        # 거래 설정\n","        self.currency_pair = \"btc_krw\"\n","        self.min_order_amount = 5000  # 최소 주문 금액 (KRW)\n","        self.max_investment = 50000   # 최대 투자 금액 (KRW)\n","        self.profit_target = 0.02     # 2% 수익률 목표\n","        self.stop_loss = 0.01         # 1% 손절매\n","\n","        # 거래 기록 (구현 예시, 실제 활용시 DB 연동 등 고려)\n","        self.positions = []\n","        self.trade_history = []\n","\n","    def get_timestamp(self):\n","        \"\"\"현재 시간을 밀리초 단위 타임스탬프로 반환\"\"\"\n","        return str(int(time.time() * 1000))\n","\n","    def create_signature(self, params_string):\n","        \"\"\"HMAC-SHA256 서명 생성\"\"\"\n","        signature = hmac.new(\n","            self.api_secret.encode('utf-8'),\n","            params_string.encode('utf-8'),\n","            hashlib.sha256\n","        ).hexdigest()\n","        return signature\n","\n","    def get_headers(self, params_string=None):\n","        \"\"\"인증 헤더 생성 (주로 POST 요청 시 사용될 수 있음)\"\"\"\n","        headers = {\n","            'Accept': 'application/json',\n","            'Content-Type': 'application/x-www-form-urlencoded'\n","        }\n","        if params_string: # 이 로직은 현재 직접 사용되지 않고, 각 요청 메서드에서 헤더를 개별 구성.\n","            headers['X-KAPI-KEY'] = self.api_key\n","        return headers\n","\n","    def test_connection(self):\n","        \"\"\"API 연결 테스트\"\"\"\n","        try:\n","            # 공개 API 먼저 테스트\n","            public_url = f\"{self.base_url}/v2/tickers\"\n","            params = {'symbol': self.currency_pair}\n","            response = requests.get(public_url, params=params)\n","\n","            if response.status_code == 200:\n","                print(\"✅ 공개 API 연결 성공\")\n","\n","                # 인증 API 테스트 (잔고 조회)\n","                timestamp = self.get_timestamp()\n","                params_data_string = f'timestamp={timestamp}'\n","                signature = self.create_signature(params_data_string)\n","\n","                private_url = f\"{self.base_url}/v2/balance?{params_data_string}&signature={signature}\"\n","                headers = {\n","                    'X-KAPI-KEY': self.api_key,\n","                    'Accept': 'application/json' # GET 요청 시 Content-Type은 보통 불필요\n","                }\n","\n","                auth_response = requests.get(private_url, headers=headers)\n","\n","                if auth_response.status_code == 200:\n","                    print(\"✅ 인증 API 연결 성공\")\n","                    return True\n","                else:\n","                    print(f\"❌ 인증 API 연결 실패: {auth_response.status_code}\")\n","                    print(f\"응답: {auth_response.text}\")\n","                    return False\n","            else:\n","                print(f\"❌ 공개 API 연결 실패: {response.status_code}\")\n","                print(f\"응답: {response.text}\")\n","                return False\n","\n","        except Exception as e:\n","            print(f\"❌ 연결 테스트 중 오류 발생: {e}\")\n","            return False\n","\n","    def get_balance(self):\n","        \"\"\"잔고 조회\"\"\"\n","        timestamp = self.get_timestamp()\n","        params_data_string = f'timestamp={timestamp}' # 서명 대상 문자열, API 명세 확인 필요\n","        signature = self.create_signature(params_data_string)\n","\n","        url = f\"{self.base_url}/v2/balance?{params_data_string}&signature={signature}\"\n","        headers = {\n","            'X-KAPI-KEY': self.api_key,\n","            'Accept': 'application/json'\n","        }\n","\n","        try:\n","            response = requests.get(url, headers=headers)\n","            if response.status_code == 200:\n","                return response.json().get('data', []) # data 키가 없을 경우 빈 리스트 반환\n","            else:\n","                print(f\"❌ 잔고 조회 실패: {response.status_code}\")\n","                print(f\"응답: {response.text}\")\n","                return None\n","        except Exception as e:\n","            print(f\"❌ 잔고 조회 중 오류 발생: {e}\")\n","            return None\n","\n","    def get_ticker(self):\n","        \"\"\"현재가 조회 (공개 API) - 수정됨\"\"\"\n","        url = f\"{self.base_url}/v2/tickers\"\n","        params = {'symbol': self.currency_pair}\n","\n","        try:\n","            response = requests.get(url, params=params)\n","            if response.status_code == 200:\n","                data = response.json()\n","\n","                # API 응답 구조 확인: data['data']가 리스트이고, 그 안에 티커 객체가 있는 경우\n","                if data.get('success') and isinstance(data.get('data'), list) and len(data['data']) > 0:\n","                    actual_ticker_data = data['data'][0] # 리스트의 첫 번째 요소를 사용\n","                    # 추가적으로 symbol 확인 (선택 사항, 이미 params로 요청했으므로)\n","                    if actual_ticker_data.get('symbol') == self.currency_pair:\n","                        # print(\"DEBUG: 실제 티커 데이터 (data['data'][0]):\", actual_ticker_data) # 필요시 이 print문 활성화\n","                        return actual_ticker_data\n","                    else:\n","                        print(f\"❌ 요청한 symbol({self.currency_pair})과 응답의 symbol({actual_ticker_data.get('symbol')})이 다릅니다.\")\n","                        return None\n","                else:\n","                    print(\"❌ 현재가 데이터가 없거나 예상된 형식이 아닙니다. (success 플래그 또는 data 필드 구조 문제)\")\n","                    print(f\"DEBUG: API 응답 data: {data}\") # 상세 응답 내용 다시 확인\n","                    return None\n","            else:\n","                print(f\"❌ 현재가 조회 실패: {response.status_code}\")\n","                print(f\"응답: {response.text}\")\n","                return None\n","        except Exception as e:\n","            print(f\"❌ 현재가 조회 중 오류 발생: {e}\")\n","            import traceback\n","            traceback.print_exc()\n","            return None\n","\n","    def get_orderbook(self):\n","        \"\"\"호가 조회 (공개 API)\"\"\"\n","        url = f\"{self.base_url}/v2/orderbook\"\n","        params = {'symbol': self.currency_pair}\n","        try:\n","            response = requests.get(url, params=params)\n","            if response.status_code == 200:\n","                return response.json() # API 응답 구조 확인 필요\n","            else:\n","                print(f\"❌ 호가 조회 실패: {response.status_code}\")\n","                print(f\"응답: {response.text}\")\n","                return None\n","        except Exception as e:\n","            print(f\"❌ 호가 조회 중 오류 발생: {e}\")\n","            return None\n","\n","    def place_order(self, side, qty, price=None):\n","        \"\"\"주문 실행 - Korbit API v2 POST 요청 서명 방식 및 파라미터 확인 필수\"\"\"\n","        timestamp = self.get_timestamp()\n","\n","        params_for_signature = {\n","            'symbol': self.currency_pair,\n","            'side': side,\n","            'qty': str(qty),\n","            'timestamp': timestamp\n","            # Korbit API v2 문서에서 nonce 또는 client_id 등의 추가 파라미터가 필요한지 확인\n","        }\n","\n","        if price:\n","            params_for_signature['price'] = str(price)\n","            params_for_signature['orderType'] = 'limit' # API 문서에서 'type' 등 다른 이름일 수 있음\n","        else:\n","            params_for_signature['orderType'] = 'market'\n","        params_string = urllib.parse.urlencode(params_for_signature)\n","        signature = self.create_signature(params_string)\n","\n","        request_params = params_for_signature.copy()\n","        request_params['signature'] = signature\n","\n","        url = f\"{self.base_url}/v2/orders\"\n","        headers = {\n","            'X-KAPI-KEY': self.api_key,\n","            'Content-Type': 'application/x-www-form-urlencoded',\n","            'Accept': 'application/json'\n","        }\n","\n","        try:\n","            response = requests.post(url, data=request_params, headers=headers)\n","            if response.status_code == 200 or response.status_code == 201:\n","                order_result = response.json()\n","                print(f\"✅ 주문 성공: {side} {qty} BTC ({params_for_signature['orderType']})\")\n","                self.trade_history.append({'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'), **order_result})\n","                return order_result\n","            else:\n","                print(f\"❌ 주문 실패: {response.status_code}\")\n","                print(f\"요청 파라미터: {request_params}\")\n","                print(f\"응답: {response.text}\")\n","                return None\n","        except Exception as e:\n","            print(f\"❌ 주문 중 오류 발생: {e}\")\n","            return None\n","\n","    def get_market_data(self, limit=100):\n","        \"\"\"시장 데이터 분석을 위한 최근 체결 내역 조회 (공개 API)\"\"\"\n","        url = f\"{self.base_url}/v2/trades\"\n","        params = {\n","            'symbol': self.currency_pair,\n","            'limit': limit # API가 'limit' 파라미터를 지원하는지, 이름이 다른지 확인\n","        }\n","        try:\n","            response = requests.get(url, params=params)\n","            if response.status_code == 200:\n","                data = response.json()\n","                if isinstance(data, list): # 응답이 체결내역 리스트 자체인 경우\n","                    return data\n","                elif data.get('success') and isinstance(data.get('data'), list):\n","                     return data['data']\n","                else:\n","                    print(\"❌ 최근 체결 데이터가 없거나 예상된 형식이 아닙니다.\")\n","                    print(f\"응답: {data}\")\n","                    return None\n","            else:\n","                print(f\"❌ 최근 체결 데이터 조회 실패: {response.status_code}\")\n","                print(f\"응답: {response.text}\")\n","                return None\n","        except Exception as e:\n","            print(f\"❌ 최근 체결 데이터 조회 중 오류 발생: {e}\")\n","            return None\n","\n","    def simple_strategy(self): # 수정됨\n","        \"\"\"간단한 거래 전략 (이동평균 기반)\"\"\"\n","        market_data = self.get_market_data(50) # 최근 50건 거래내역\n","        if not market_data or len(market_data) < 10: # 최소 10개 데이터 필요 가정\n","            print(\"⚠️ 시장 데이터 부족으로 전략 실행 불가\")\n","            return None\n","\n","        try:\n","            prices = [float(trade['price']) for trade in market_data]\n","            df = pd.DataFrame({'price': prices})\n","        except (KeyError, TypeError) as e: # 'price' 키가 없거나, trade가 dict가 아닌 경우\n","            print(f\"❌ 시장 데이터(거래 내역) 처리 중 오류: {e}\")\n","            return None\n","        except ValueError as e:\n","            print(f\"❌ 시장 데이터(거래 내역)의 가격을 숫자로 변환할 수 없습니다: {e}\")\n","            return None\n","\n","        df['sma_5'] = df['price'].rolling(window=5).mean()\n","        df['sma_10'] = df['price'].rolling(window=10).mean()\n","\n","        ticker_data = self.get_ticker()\n","        if not ticker_data:\n","            return None\n","\n","        try:\n","            current_price_str = ticker_data.get('close') # 'close' 키가 없을 수 있으므로 .get() 사용\n","            if current_price_str is None:\n","                print(f\"❌ Ticker 데이터에서 'close' 키를 찾을 수 없습니다. 받은 데이터: {ticker_data}\")\n","                return None\n","            current_price = float(current_price_str)\n","        except ValueError:\n","            print(f\"❌ Ticker 데이터의 'close' 값을 숫자로 변환할 수 없습니다. 값: {current_price_str}\")\n","            return None\n","        except Exception as e: # 기타 예외 처리\n","            print(f\"❌ Ticker 데이터 처리 중 알 수 없는 오류: {e}\")\n","            return None\n","\n","\n","        # 데이터가 충분하지 않으면 이동평균이 NaN일 수 있음. 이 경우 현재가로 대체.\n","        sma_5 = df['sma_5'].iloc[-1] if not pd.isna(df['sma_5'].iloc[-1]) else current_price\n","        sma_10 = df['sma_10'].iloc[-1] if not pd.isna(df['sma_10'].iloc[-1]) else current_price\n","\n","        print(f\"현재가: {current_price:,.0f}원\")\n","        print(f\"5일 평균: {sma_5:,.0f}원 (데이터 수: {len(df)})\")\n","        print(f\"10일 평균: {sma_10:,.0f}원 (데이터 수: {len(df)})\")\n","\n","        if sma_5 > sma_10 and current_price > sma_5:\n","            return \"BUY\"\n","        elif sma_5 < sma_10 and current_price < sma_5:\n","            return \"SELL\"\n","        else:\n","            return \"HOLD\"\n","\n","    def calculate_position_size(self, price_per_btc):\n","        \"\"\"포지션 크기(BTC 수량) 계산\"\"\"\n","        balance_data = self.get_balance()\n","        if not balance_data:\n","            print(\"⚠️ 잔고 조회 실패로 포지션 크기 계산 불가\")\n","            return 0\n","\n","        krw_balance = 0\n","        for account in balance_data:\n","            if account.get('currency') == 'krw':\n","                try:\n","                    krw_balance = float(account.get('available', 0))\n","                except ValueError:\n","                    print(f\"⚠️ KRW 잔고 값 변환 오류: {account.get('available')}\")\n","                    krw_balance = 0\n","                break\n","\n","        print(f\"현재 KRW 잔고: {krw_balance:,.0f}원\")\n","\n","        investable_krw = min(self.max_investment, krw_balance)\n","        print(f\"투자 설정액: {self.max_investment:,.0f}원, 실제 투자 가능액: {investable_krw:,.0f}원\")\n","\n","        if investable_krw < self.min_order_amount:\n","            print(f\"⚠️ 투자 가능액({investable_krw:,.0f}원)이 최소 주문액({self.min_order_amount:,.0f}원)보다 작습니다.\")\n","            return 0\n","\n","        if price_per_btc <= 0:\n","            print(\"⚠️ BTC 가격이 0 이하이므로 수량 계산 불가.\")\n","            return 0\n","\n","        # BTC 구매 수량 계산 (수수료 미고려)\n","        btc_amount = investable_krw / price_per_btc\n","        return round(btc_amount, 8)\n","\n","    def run_trading_loop(self, interval=60, max_iterations=None): # 수정됨\n","        \"\"\"거래 루프 실행\"\"\"\n","        print(\"🚀 자동거래 시작!\")\n","        print(f\"거래 페어: {self.currency_pair.upper()}\")\n","        print(f\"최대 투자 설정액 (1회): {self.max_investment:,.0f}원\")\n","        print(f\"최소 주문 설정액 (1회): {self.min_order_amount:,.0f}원\")\n","        print(f\"수익 실현 목표: {self.profit_target*100:.2f}%\")\n","        print(f\"손절매 기준: {self.stop_loss*100:.2f}%\")\n","        print(f\"체크 간격: {interval}초\")\n","        if max_iterations:\n","            print(f\"최대 실행 횟수: {max_iterations}회\")\n","        print(\"-\" * 50)\n","\n","        iteration = 0\n","        while True:\n","            iteration += 1\n","            now_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n","            print(f\"\\n⏰ {now_str} (실행 {iteration}회차)\")\n","\n","            if max_iterations and iteration > max_iterations:\n","                print(f\"\\n⏹️ 최대 실행 횟수({max_iterations}회)에 도달하여 거래를 종료합니다.\")\n","                break\n","\n","            try:\n","                ticker_data = self.get_ticker()\n","                if not ticker_data:\n","                    print(\"⚠️ Ticker 정보 조회 실패. 다음 주기로 넘어갑니다.\")\n","                    time.sleep(interval)\n","                    continue\n","\n","                current_price_str = ticker_data.get('close')\n","                if current_price_str is None:\n","                    print(f\"❌ Ticker 데이터에서 'close' 키를 찾을 수 없습니다. 다음 주기로 넘어갑니다. 데이터: {ticker_data}\")\n","                    time.sleep(interval)\n","                    continue\n","                try:\n","                    current_price = float(current_price_str)\n","                except ValueError:\n","                    print(f\"❌ Ticker 'close' 값 ({current_price_str})을 숫자로 변환 불가. 다음 주기로 넘어갑니다.\")\n","                    time.sleep(interval)\n","                    continue\n","\n","                # 거래 전략 실행\n","                signal = self.simple_strategy() # simple_strategy 내부에서도 get_ticker 호출. 비효율적일 수 있음.\n","\n","                if signal:\n","                    print(f\"📊 거래 신호: {signal} (현재가: {current_price:,.0f}원)\")\n","\n","                    if signal == \"BUY\":\n","                        has_btc_position = False\n","                        balance = self.get_balance()\n","                        if balance:\n","                            for acc in balance:\n","                                if acc.get('currency') == 'btc' and float(acc.get('available', 0)) > 0.00000001: # 극소량 이상 보유시\n","                                    has_btc_position = True\n","                                    print(f\"ℹ️ 이미 BTC 보유 중 ({float(acc.get('available', 0))} BTC). 추가 매수하지 않음.\")\n","                                    break\n","\n","                        if not has_btc_position:\n","                            btc_to_buy = self.calculate_position_size(current_price)\n","                            if btc_to_buy > 0:\n","                                print(f\"💰 매수 주문 시도: {btc_to_buy:.8f} BTC at market price (약 {current_price:,.0f}원)\")\n","                                order_result = self.place_order(side='buy', qty=btc_to_buy) # 시장가 매수\n","                                if order_result:\n","                                    self.positions.append({\n","                                        'type': 'BUY', 'qty': btc_to_buy, 'price': current_price,\n","                                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n","                                        'order_id': order_result.get('orderId') # API 응답에서 주문 ID 가져오기\n","                                    })\n","                                    print(f\"✅ 매수 주문 결과: {order_result}\")\n","                            else:\n","                                print(\"ℹ️ 계산된 BTC 매수 수량이 0 이하입니다. 매수하지 않음.\")\n","\n","                    elif signal == \"SELL\":\n","                        balance = self.get_balance()\n","                        btc_available = 0\n","                        if balance:\n","                            for account in balance:\n","                                if account.get('currency') == 'btc':\n","                                    try:\n","                                        btc_available = float(account.get('available', 0))\n","                                    except ValueError:\n","                                        btc_available = 0\n","                                    break\n","\n","                        if btc_available > 0.00000001: # 극소량 이상 있을 경우 매도\n","                            print(f\"💰 매도 주문 시도: {btc_available:.8f} BTC at market price (약 {current_price:,.0f}원)\")\n","                            order_result = self.place_order(side='sell', qty=btc_available) # 시장가 매도\n","                            if order_result:\n","                                # 포지션 정리 로직 (간단화)\n","                                self.positions = [p for p in self.positions if p['type'] != 'BUY'] # 모든 매수 포지션 제거\n","                                self.positions.append({\n","                                    'type': 'SELL', 'qty': btc_available, 'price': current_price,\n","                                    'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n","                                    'order_id': order_result.get('orderId')\n","                                })\n","                                print(f\"✅ 매도 주문 결과: {order_result}\")\n","                        else:\n","                            print(\"ℹ️ 매도할 BTC 잔고가 없습니다.\")\n","                else:\n","                    print(\"📊 거래 신호: HOLD 또는 데이터 부족\")\n","\n","                # 현재 잔고 표시 (매 루프마다 표시)\n","                current_balances = self.get_balance()\n","                if current_balances:\n","                    print(\"💰 현재 잔고:\")\n","                    for acc_bal in current_balances:\n","                        try:\n","                            avail_bal = float(acc_bal.get('available',0))\n","                            if avail_bal > 0 : # 0보다 큰 잔고만 표시 (문자열 0.0도 포함)\n","                                print(f\"  {acc_bal.get('currency','N/A').upper()}: {avail_bal:,.8f}\")\n","                        except ValueError:\n","                             print(f\"  {acc_bal.get('currency','N/A').upper()}: (값 변환 불가 - {acc_bal.get('available')})\")\n","\n","\n","            except KeyboardInterrupt:\n","                print(\"\\n🛑 사용자에 의해 거래가 중단되었습니다.\")\n","                break\n","            except Exception as e:\n","                print(f\"❌ 거래 루프 중 예기치 않은 오류 발생: {e}\")\n","                import traceback\n","                traceback.print_exc() # 상세 오류 스택 출력\n","                print(\"오류 발생으로 인해 30초 후 재시도합니다...\")\n","                time.sleep(30) # 오류 발생 시 잠시 대기 후 재시도\n","\n","            print(f\"💤 {interval}초 후 다음 사이클 시작...\")\n","            time.sleep(interval)\n","\n","# 코랩용 사용 예시\n","def main(): # 수정됨\n","    from getpass import getpass\n","\n","    print(\"🔐 Korbit API 정보를 입력해주세요:\")\n","    API_KEY = getpass(\"API Key: \")\n","    API_SECRET = getpass(\"API Secret: \")\n","\n","    trader = KorbitTrader(API_KEY, API_SECRET)\n","\n","    if trader.test_connection():\n","        print(\"\\n📊 현재 시장 상황:\")\n","        ticker = trader.get_ticker()\n","        if ticker:\n","            try:\n","                current_price_str = ticker.get('close')\n","                change_pct_str = ticker.get('priceChangePercent')\n","\n","                if current_price_str is not None and change_pct_str is not None:\n","                    print(f\"BTC/KRW: {float(current_price_str):,.0f}원\")\n","                    print(f\"24시간 변화: {float(change_pct_str):+.2f}%\")\n","                else:\n","                    print(\"Ticker 정보에서 'close' 또는 'priceChangePercent' 키를 찾을 수 없습니다.\")\n","                print(f\"전체 Ticker 정보: {ticker}\")\n","\n","            except KeyError as e:\n","                print(f\"❌ Ticker 데이터에서 필요한 키를 찾을 수 없습니다: {e}\")\n","                print(f\"받은 Ticker 데이터: {ticker}\")\n","            except ValueError as e:\n","                print(f\"❌ Ticker 데이터의 숫자 변환 중 오류 발생: {e}\")\n","                print(f\"받은 Ticker 데이터: {ticker}\")\n","            except Exception as e:\n","                print(f\"❌ Ticker 정보 처리 중 알 수 없는 오류: {e}\")\n","\n","\n","        balance_data = trader.get_balance()\n","        if balance_data:\n","            print(\"\\n💰 현재 잔고:\")\n","            for account in balance_data:\n","                try:\n","                    available_balance = float(account.get('available', 0))\n","                    if available_balance > 0: # 0보다 큰 잔고만 표시\n","                         print(f\"  {account.get('currency','N/A').upper()}: {available_balance:,.8f}\")\n","                except ValueError:\n","                    print(f\"  {account.get('currency','N/A').upper()}: 잔액을 숫자로 변환할 수 없습니다 - {account.get('available')}\")\n","                except KeyError: # .get() 사용으로 KeyError는 잘 발생 안 함\n","                    print(f\"  {account.get('currency','N/A').upper()}: 필수 키를 찾을 수 없습니다.\")\n","        else:\n","            print(\"잔고 정보를 가져올 수 없습니다.\")\n","\n","\n","        print(\"\\n📋 실행 옵션:\")\n","        print(\"1. 무한 실행 (Ctrl+C로 중단)\")\n","        print(\"2. 제한된 횟수 실행 (코랩 세션 관리용)\")\n","\n","        choice = input(\"선택 (1 또는 2): \")\n","\n","        if choice == \"2\":\n","            try:\n","                max_iter_input = input(\"최대 실행 횟수: \")\n","                max_iter = int(max_iter_input)\n","                if max_iter <=0:\n","                    print(\"최대 실행 횟수는 0보다 커야 합니다. 기본값(10회)으로 실행합니다.\")\n","                    max_iter = 10\n","                trader.run_trading_loop(interval=60, max_iterations=max_iter)\n","            except ValueError:\n","                print(\"❌ 잘못된 입력입니다. 숫자를 입력해주세요. 기본값(10회)으로 실행합니다.\")\n","                trader.run_trading_loop(interval=60, max_iterations=10) # 예외 발생시 기본값으로 실행\n","        elif choice == \"1\":\n","            trader.run_trading_loop(interval=60)\n","        else:\n","            print(\"잘못된 선택입니다. 프로그램을 종료합니다.\")\n","\n","    else:\n","        print(\"❌ API 연결에 실패했습니다. API 키와 시크릿, 네트워크 상태를 확인해주세요.\")\n","        print(\"\\n💡 확인사항:\")\n","        print(\"1. API 키/시크릿이 올바른지 확인\")\n","        print(\"2. API 키에 거래 권한이 있는지 확인 (Korbit 웹사이트)\")\n","        print(\"3. Korbit API 서버 상태 확인 (공지사항 등)\")\n","        print(\"4. 사용자의 네트워크 연결 상태 확인\")\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"eB1gVm4lN0WG"},"execution_count":null,"outputs":[]}]}