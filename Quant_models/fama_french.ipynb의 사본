{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["API_KEY = \"s0zt_Vh7hCu-BnxjJlo7wsTi8MEJwp_IQ8VqTT7ceX0\"\n","API_SECRET = \"Rs-JwFwVIfcxCG3zT25UfUqFhMImL57BzZQvm7GAHts\"\n","DEMO_MODE = False"],"metadata":{"id":"ucXQmkLT82Dr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install requests pandas numpy matplotlib seaborn yfinance\n","import requests\n","import pandas as pd\n","import numpy as np\n","import time\n","import json\n","import hashlib\n","import hmac\n","import base64\n","import urllib.parse\n","from datetime import datetime, timedelta\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import yfinance as yf\n","from typing import Dict, List, Tuple, Optional\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","class KorbitAPI:\n","    \"\"\"Korbit API 래퍼 클래스\"\"\"\n","\n","    def __init__(self, api_key: str, api_secret: str):\n","        self.api_key = api_key\n","        self.api_secret = api_secret\n","        self.base_url = \"https://api.korbit.co.kr\"\n","        self.access_token = None\n","        self.refresh_token = None\n","\n","    def _generate_signature(self, method: str, path: str, params: dict = None) -> str:\n","        \"\"\"API 서명 생성\"\"\"\n","        nonce = str(int(time.time() * 1000))\n","        message = nonce + method + path\n","\n","        if params:\n","            message += urllib.parse.urlencode(sorted(params.items()))\n","\n","        signature = hmac.new(\n","            self.api_secret.encode(),\n","            message.encode(),\n","            hashlib.sha512\n","        ).hexdigest()\n","\n","        return signature, nonce\n","\n","    def authenticate(self):\n","        \"\"\"API 인증\"\"\"\n","        url = f\"{self.base_url}/v1/oauth2/access_token\"\n","        data = {\n","            'client_id': self.api_key,\n","            'client_secret': self.api_secret,\n","            'grant_type': 'client_credentials'\n","        }\n","\n","        response = requests.post(url, data=data)\n","        if response.status_code == 200:\n","            token_data = response.json()\n","            self.access_token = token_data['access_token']\n","            self.refresh_token = token_data.get('refresh_token')\n","            print(\"인증 성공!\")\n","        else:\n","            print(f\"인증 실패: {response.text}\")\n","\n","    def get_ticker(self, currency_pair: str = \"btc_krw\") -> dict:\n","        \"\"\"현재가 정보 조회\"\"\"\n","        url = f\"{self.base_url}/v1/ticker\"\n","        params = {'currency_pair': currency_pair}\n","        response = requests.get(url, params=params)\n","        return response.json() if response.status_code == 200 else None\n","\n","    def get_orderbook(self, currency_pair: str = \"btc_krw\") -> dict:\n","        \"\"\"호가 정보 조회\"\"\"\n","        url = f\"{self.base_url}/v1/orderbook\"\n","        params = {'currency_pair': currency_pair}\n","        response = requests.get(url, params=params)\n","        return response.json() if response.status_code == 200 else None\n","\n","    def get_transactions(self, currency_pair: str = \"btc_krw\", time: str = \"hour\") -> list:\n","        \"\"\"거래 내역 조회\"\"\"\n","        url = f\"{self.base_url}/v1/transactions\"\n","        params = {'currency_pair': currency_pair, 'time': time}\n","        response = requests.get(url, params=params)\n","        return response.json() if response.status_code == 200 else []\n","\n","    def get_balance(self) -> dict:\n","        \"\"\"잔고 조회\"\"\"\n","        if not self.access_token:\n","            self.authenticate()\n","\n","        url = f\"{self.base_url}/v1/user/balances\"\n","        headers = {'Authorization': f'Bearer {self.access_token}'}\n","        response = requests.get(url, headers=headers)\n","        return response.json() if response.status_code == 200 else None\n","\n","    def place_order(self, type: str, currency_pair: str, price: float, coin_amount: float) -> dict:\n","        \"\"\"주문 실행\"\"\"\n","        if not self.access_token:\n","            self.authenticate()\n","\n","        url = f\"{self.base_url}/v1/user/orders/{type}\"\n","        headers = {'Authorization': f'Bearer {self.access_token}'}\n","        data = {\n","            'currency_pair': currency_pair,\n","            'price': price,\n","            'coin_amount': coin_amount\n","        }\n","\n","        response = requests.post(url, headers=headers, data=data)\n","        return response.json() if response.status_code == 200 else None\n","\n","class FamaFrenchFactorModel:\n","    \"\"\"Fama-French 3-Factor 모델 구현\"\"\"\n","\n","    def __init__(self):\n","        self.factors = {}\n","\n","    def calculate_market_factor(self, returns: pd.Series, market_returns: pd.Series) -> float:\n","        \"\"\"시장 팩터 (Market - Risk Free Rate) 계산\"\"\"\n","        # 무위험 수익률을 0으로 가정 (실제로는 국채 수익률 사용)\n","        risk_free_rate = 0.0\n","        market_premium = market_returns.mean() - risk_free_rate\n","        return market_premium\n","\n","    def calculate_size_factor(self, price_data: pd.DataFrame) -> float:\n","        \"\"\"규모 팩터 (SMB: Small Minus Big) 계산\"\"\"\n","        # 암호화폐의 경우 시가총액 기준으로 계산\n","        # 여기서는 단순화하여 가격 변동성으로 대체\n","        volatility = price_data.pct_change().std()\n","        return volatility.mean() if hasattr(volatility, 'mean') else volatility\n","\n","    def calculate_value_factor(self, price_data: pd.DataFrame) -> float:\n","        \"\"\"가치 팩터 (HML: High Minus Low) 계산\"\"\"\n","        # 암호화폐의 경우 전통적인 가치 지표가 없으므로\n","        # 가격의 평균 회귀 경향을 측정\n","        returns = price_data['close'].pct_change().dropna() if 'close' in price_data.columns else price_data.iloc[:, 0].pct_change().dropna()\n","\n","        if len(returns) > 1:\n","            # 자기상관계수 계산 (lag=1)\n","            mean_reversion = -returns.corr(returns.shift(1))\n","            mean_reversion = mean_reversion if not pd.isna(mean_reversion) else 0\n","        else:\n","            mean_reversion = 0\n","\n","        return mean_reversion\n","\n","    def calculate_factor_loadings(self, asset_returns: pd.Series,\n","                                market_returns: pd.Series,\n","                                price_data: pd.DataFrame) -> Dict[str, float]:\n","        \"\"\"팩터 로딩 계산\"\"\"\n","\n","        # 시장 팩터\n","        market_factor = self.calculate_market_factor(asset_returns, market_returns)\n","\n","        # 규모 팩터\n","        size_factor = self.calculate_size_factor(price_data)\n","\n","        # 가치 팩터\n","        value_factor = self.calculate_value_factor(price_data)\n","\n","        return {\n","            'market_factor': market_factor,\n","            'size_factor': size_factor,\n","            'value_factor': value_factor\n","        }\n","\n","    def calculate_expected_return(self, factors: Dict[str, float],\n","                                factor_premiums: Dict[str, float]) -> float:\n","        \"\"\"기대 수익률 계산\"\"\"\n","        expected_return = (\n","            factors['market_factor'] * factor_premiums.get('market_premium', 0.1) +\n","            factors['size_factor'] * factor_premiums.get('size_premium', 0.05) +\n","            factors['value_factor'] * factor_premiums.get('value_premium', 0.03)\n","        )\n","        return expected_return\n","\n","class TradingStrategy:\n","    \"\"\"거래 전략 클래스\"\"\"\n","\n","    def __init__(self, korbit_api: KorbitAPI):\n","        self.api = korbit_api\n","        self.ff_model = FamaFrenchFactorModel()\n","        self.position = 0  # 현재 포지션\n","        self.cash = 1000000  # 초기 현금 (100만원)\n","        self.transaction_history = []\n","\n","    def get_market_data(self, currency_pair: str = \"btc_krw\", days: int = 30) -> pd.DataFrame:\n","        \"\"\"시장 데이터 수집\"\"\"\n","        transactions = self.api.get_transactions(currency_pair, \"day\")\n","\n","        if not transactions:\n","            print(\"거래 데이터를 가져올 수 없습니다.\")\n","            return pd.DataFrame()\n","\n","        # 데이터 변환\n","        df = pd.DataFrame(transactions)\n","        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')\n","        df['price'] = df['price'].astype(float)\n","        df['amount'] = df['amount'].astype(float)\n","\n","        # 일별 OHLC 데이터 생성\n","        daily_data = df.groupby(df['timestamp'].dt.date).agg({\n","            'price': ['first', 'max', 'min', 'last'],\n","            'amount': 'sum'\n","        }).round(2)\n","\n","        daily_data.columns = ['open', 'high', 'low', 'close', 'volume']\n","        daily_data.index = pd.to_datetime(daily_data.index)\n","\n","        return daily_data.tail(days)\n","\n","    def calculate_rsi(self, prices: pd.Series, period: int = 14) -> pd.Series:\n","        \"\"\"RSI 계산 (ta-lib 없이 직접 구현)\"\"\"\n","        delta = prices.diff()\n","        gain = (delta.where(delta > 0, 0)).rolling(window=period, min_periods=1).mean()\n","        loss = (-delta.where(delta < 0, 0)).rolling(window=period, min_periods=1).mean()\n","        rs = gain / loss\n","        rsi = 100 - (100 / (1 + rs))\n","        return rsi.fillna(50)  # NaN 값을 중립값 50으로 대체\n","\n","    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:\n","        \"\"\"기술적 지표 계산\"\"\"\n","        df = df.copy()\n","\n","        # 이동평균\n","        df['sma_5'] = df['close'].rolling(window=5, min_periods=1).mean()\n","        df['sma_20'] = df['close'].rolling(window=20, min_periods=1).mean()\n","\n","        # RSI (직접 구현)\n","        df['rsi'] = self.calculate_rsi(df['close'])\n","\n","        # 볼린저 밴드\n","        df['bb_middle'] = df['close'].rolling(window=20, min_periods=1).mean()\n","        bb_std = df['close'].rolling(window=20, min_periods=1).std()\n","        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)\n","        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)\n","\n","        # NaN 값 처리\n","        df = df.fillna(method='ffill').fillna(method='bfill')\n","\n","        return df\n","\n","    def generate_signals(self, df: pd.DataFrame) -> pd.DataFrame:\n","        \"\"\"거래 신호 생성\"\"\"\n","        df = df.copy()\n","\n","        # Fama-French 팩터 계산\n","        returns = df['close'].pct_change().dropna()\n","        market_returns = returns  # 비트코인을 시장 지수로 사용\n","\n","        factors = self.ff_model.calculate_factor_loadings(\n","            returns, market_returns, df[['close']]\n","        )\n","\n","        # 팩터 프리미엄 (임의 설정, 실제로는 과거 데이터 기반 추정)\n","        factor_premiums = {\n","            'market_premium': 0.08,\n","            'size_premium': 0.04,\n","            'value_premium': 0.02\n","        }\n","\n","        expected_return = self.ff_model.calculate_expected_return(factors, factor_premiums)\n","\n","        # 신호 생성\n","        df['signal'] = 0\n","        df['ff_expected_return'] = expected_return\n","\n","        # 복합 신호\n","        for i in range(len(df)):\n","            if i < 5:  # 최소 데이터 요구량 감소\n","                continue\n","\n","            # 기술적 분석 신호\n","            tech_signal = 0\n","\n","            # 이동평균 크로스\n","            if not pd.isna(df.iloc[i]['sma_5']) and not pd.isna(df.iloc[i]['sma_20']):\n","                if df.iloc[i]['sma_5'] > df.iloc[i]['sma_20']:\n","                    tech_signal += 1\n","                else:\n","                    tech_signal -= 1\n","\n","            # RSI\n","            if not pd.isna(df.iloc[i]['rsi']):\n","                if df.iloc[i]['rsi'] < 30:\n","                    tech_signal += 1\n","                elif df.iloc[i]['rsi'] > 70:\n","                    tech_signal -= 1\n","\n","            # 볼린저 밴드\n","            if (not pd.isna(df.iloc[i]['bb_lower']) and\n","                not pd.isna(df.iloc[i]['bb_upper'])):\n","                if df.iloc[i]['close'] < df.iloc[i]['bb_lower']:\n","                    tech_signal += 1\n","                elif df.iloc[i]['close'] > df.iloc[i]['bb_upper']:\n","                    tech_signal -= 1\n","\n","            # Fama-French 모델 신호\n","            ff_signal = 1 if expected_return > 0.05 else -1\n","\n","            # 최종 신호 (가중 평균)\n","            final_signal = (tech_signal * 0.7) + (ff_signal * 0.3)\n","\n","            if final_signal > 0.5:\n","                df.iloc[i, df.columns.get_loc('signal')] = 1  # 매수\n","            elif final_signal < -0.5:\n","                df.iloc[i, df.columns.get_loc('signal')] = -1  # 매도\n","            else:\n","                df.iloc[i, df.columns.get_loc('signal')] = 0  # 관망\n","\n","        return df\n","\n","    def execute_trade(self, signal: int, current_price: float, amount: float = 0.01):\n","        \"\"\"거래 실행\"\"\"\n","        if signal == 1 and self.cash > current_price * amount:  # 매수\n","            cost = current_price * amount\n","            self.cash -= cost\n","            self.position += amount\n","\n","            transaction = {\n","                'timestamp': datetime.now(),\n","                'type': 'buy',\n","                'price': current_price,\n","                'amount': amount,\n","                'cost': cost\n","            }\n","            self.transaction_history.append(transaction)\n","            print(f\"매수 실행: {amount:.4f} BTC @ {current_price:,.0f} KRW\")\n","\n","        elif signal == -1 and self.position > 0:  # 매도\n","            sell_amount = min(self.position, amount)\n","            revenue = current_price * sell_amount\n","            self.cash += revenue\n","            self.position -= sell_amount\n","\n","            transaction = {\n","                'timestamp': datetime.now(),\n","                'type': 'sell',\n","                'price': current_price,\n","                'amount': sell_amount,\n","                'revenue': revenue\n","            }\n","            self.transaction_history.append(transaction)\n","            print(f\"매도 실행: {sell_amount:.4f} BTC @ {current_price:,.0f} KRW\")\n","\n","    def get_portfolio_value(self, current_price: float) -> float:\n","        \"\"\"포트폴리오 총 가치 계산\"\"\"\n","        return self.cash + (self.position * current_price)\n","\n","    def run_backtest(self, df: pd.DataFrame):\n","        \"\"\"백테스트 실행\"\"\"\n","        initial_value = self.cash\n","        portfolio_values = []\n","\n","        for i, row in df.iterrows():\n","            if pd.isna(row['signal']):\n","                continue\n","\n","            current_price = row['close']\n","            signal = int(row['signal'])\n","\n","            self.execute_trade(signal, current_price)\n","            portfolio_value = self.get_portfolio_value(current_price)\n","            portfolio_values.append({\n","                'date': i,\n","                'portfolio_value': portfolio_value,\n","                'cash': self.cash,\n","                'position': self.position,\n","                'btc_price': current_price\n","            })\n","\n","        return pd.DataFrame(portfolio_values)\n","\n","def visualize_results(df: pd.DataFrame, portfolio_df: pd.DataFrame, factors: Dict[str, float]):\n","    \"\"\"결과 시각화\"\"\"\n","    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n","\n","    # 가격 차트와 신호\n","    ax1 = axes[0, 0]\n","    ax1.plot(df.index, df['close'], label='BTC Price', color='black', linewidth=2)\n","    ax1.plot(df.index, df['sma_5'], label='SMA 5', alpha=0.7)\n","    ax1.plot(df.index, df['sma_20'], label='SMA 20', alpha=0.7)\n","\n","    buy_signals = df[df['signal'] == 1]\n","    sell_signals = df[df['signal'] == -1]\n","\n","    ax1.scatter(buy_signals.index, buy_signals['close'],\n","               color='green', marker='^', s=100, label='Buy Signal')\n","    ax1.scatter(sell_signals.index, sell_signals['close'],\n","               color='red', marker='v', s=100, label='Sell Signal')\n","\n","    ax1.set_title('BTC Price and Trading Signals')\n","    ax1.set_ylabel('Price (KRW)')\n","    ax1.legend()\n","    ax1.grid(True, alpha=0.3)\n","\n","    # 포트폴리오 가치\n","    ax2 = axes[0, 1]\n","    if not portfolio_df.empty:\n","        ax2.plot(portfolio_df['date'], portfolio_df['portfolio_value'],\n","                label='Portfolio Value', color='blue', linewidth=2)\n","        ax2.set_title('Portfolio Value Over Time')\n","        ax2.set_ylabel('Value (KRW)')\n","        ax2.legend()\n","        ax2.grid(True, alpha=0.3)\n","\n","    # RSI\n","    ax3 = axes[1, 0]\n","    ax3.plot(df.index, df['rsi'], label='RSI', color='purple')\n","    ax3.axhline(y=70, color='r', linestyle='--', alpha=0.7, label='Overbought')\n","    ax3.axhline(y=30, color='g', linestyle='--', alpha=0.7, label='Oversold')\n","    ax3.set_title('RSI Indicator')\n","    ax3.set_ylabel('RSI')\n","    ax3.legend()\n","    ax3.grid(True, alpha=0.3)\n","\n","    # Fama-French 팩터\n","    ax4 = axes[1, 1]\n","    factor_names = list(factors.keys())\n","    factor_values = list(factors.values())\n","\n","    bars = ax4.bar(factor_names, factor_values,\n","                   color=['blue', 'green', 'orange'], alpha=0.7)\n","    ax4.set_title('Fama-French Factor Loadings')\n","    ax4.set_ylabel('Factor Value')\n","    ax4.tick_params(axis='x', rotation=45)\n","\n","    # 막대 위에 값 표시\n","    for bar, value in zip(bars, factor_values):\n","        ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.001,\n","                f'{value:.4f}', ha='center', va='bottom')\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","# 메인 실행 함수\n","def main():\n","    \"\"\"메인 실행 함수\"\"\"\n","    print(\"=\" * 60)\n","    print(\"Korbit 자동거래 시스템 (Fama-French 3-Factor Model)\")\n","    print(\"=\" * 60)\n","\n","    # API 키 설정 (실제 사용시 본인의 API 키로 변경)\n","    API_KEY = \"YOUR_API_KEY\"\n","    API_SECRET = \"YOUR_API_SECRET\"\n","\n","    # 데모 모드로 실행 (실제 거래 없이 백테스트만)\n","    DEMO_MODE = True\n","\n","    if DEMO_MODE:\n","        print(\"⚠️  데모 모드로 실행됩니다. 실제 거래는 발생하지 않습니다.\")\n","        print()\n","\n","        # 가상의 API 객체 생성\n","        api = KorbitAPI(\"demo_key\", \"demo_secret\")\n","\n","        # 실제 Korbit API 대신 야후 파이낸스에서 비트코인 데이터 가져오기\n","        print(\"📊 비트코인 가격 데이터 수집 중...\")\n","        try:\n","            btc_data = yf.download(\"BTC-USD\", period=\"60d\", interval=\"1d\", progress=False)\n","        except Exception as e:\n","            print(f\"❌ 데이터 수집 오류: {e}\")\n","            return\n","\n","        if btc_data.empty:\n","            print(\"❌ 데이터를 가져올 수 없습니다.\")\n","            return\n","\n","        # 원화 환율 적용 (대략 1300원/달러로 가정)\n","        btc_data = btc_data * 1300\n","\n","        # 멀티레벨 컬럼 처리\n","        if isinstance(btc_data.columns, pd.MultiIndex):\n","            btc_data.columns = btc_data.columns.get_level_values(0)\n","\n","        btc_data.columns = [str(col).lower() for col in btc_data.columns]\n","\n","        print(f\"✅ {len(btc_data)}일간의 데이터를 수집했습니다.\")\n","        print(f\"📈 가격 범위: {btc_data['close'].min():,.0f} ~ {btc_data['close'].max():,.0f} KRW\")\n","\n","    else:\n","        # 실제 API 사용\n","        api = KorbitAPI(API_KEY, API_SECRET)\n","        api.authenticate()\n","\n","        print(\"📊 Korbit에서 시장 데이터 수집 중...\")\n","        btc_data = None  # 실제 구현시 api.get_market_data() 사용\n","\n","    # 거래 전략 초기화\n","    strategy = TradingStrategy(api)\n","\n","    if DEMO_MODE and not btc_data.empty:\n","        # 기술적 지표 계산\n","        print(\"🔧 기술적 지표 계산 중...\")\n","        df_with_indicators = strategy.calculate_technical_indicators(btc_data)\n","\n","        # 거래 신호 생성\n","        print(\"📈 거래 신호 생성 중...\")\n","        df_with_signals = strategy.generate_signals(df_with_indicators)\n","\n","        # Fama-French 팩터 계산\n","        returns = df_with_signals['close'].pct_change().dropna()\n","        factors = strategy.ff_model.calculate_factor_loadings(\n","            returns, returns, df_with_signals[['close']]\n","        )\n","\n","        print(\"\\n📊 Fama-French 3-Factor 분석 결과:\")\n","        print(\"-\" * 40)\n","        for factor, value in factors.items():\n","            print(f\"{factor:15}: {value:8.4f}\")\n","\n","        # 백테스트 실행\n","        print(\"\\n🔄 백테스트 실행 중...\")\n","        portfolio_results = strategy.run_backtest(df_with_signals)\n","\n","        # 결과 출력\n","        if not portfolio_results.empty:\n","            initial_value = 1000000\n","            final_value = portfolio_results.iloc[-1]['portfolio_value']\n","            total_return = (final_value - initial_value) / initial_value * 100\n","\n","            print(f\"\\n📈 백테스트 결과:\")\n","            print(\"-\" * 40)\n","            print(f\"초기 자금     : {initial_value:,} KRW\")\n","            print(f\"최종 자산     : {final_value:,.0f} KRW\")\n","            print(f\"총 수익률     : {total_return:+.2f}%\")\n","            print(f\"현재 BTC 보유 : {strategy.position:.4f} BTC\")\n","            print(f\"현금 잔고     : {strategy.cash:,.0f} KRW\")\n","            print(f\"총 거래 횟수  : {len(strategy.transaction_history)}\")\n","\n","        # 결과 시각화\n","        print(\"\\n📊 결과 차트 생성 중...\")\n","        visualize_results(df_with_signals, portfolio_results, factors)\n","\n","    print(\"\\n\" + \"=\" * 60)\n","    print(\"프로그램 실행 완료!\")\n","    print(\"실제 거래를 위해서는 본인의 Korbit API 키를 설정하고\")\n","    print(\"DEMO_MODE를 False로 변경하세요.\")\n","    print(\"=\" * 60)\n","\n","# 실행\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"rg-ggeW691Cp"},"execution_count":null,"outputs":[]}]}