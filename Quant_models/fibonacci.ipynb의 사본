{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[],"authorship_tag":"ABX9TyMhULT2QPdyrd6ts2aD6zsh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"E1y0jbKRXurz"},"outputs":[],"source":["!pip install finter"]},{"cell_type":"code","source":["import os\n","os.environ['FINTER_API_KEY'] = \"cec2a2e025fa087b9b6ba8321a10422c7ce25dee\"\n","\n","# Do not include the above code in am.py"],"metadata":{"id":"jC2OuLc2X2xg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from datetime import datetime, timedelta\n","\n","\n","def calculate_previous_start_date(start_date, lookback_days):\n","    start = datetime.strptime(str(start_date), \"%Y%m%d\")\n","    previous_start = start - timedelta(days=lookback_days)\n","    return int(previous_start.strftime(\"%Y%m%d\"))"],"metadata":{"id":"NXnK1Nd1X4sW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from finter.framework_model import BaseAlpha\n","\n","# Define the lookback period in days\n","LOOKBACK_DAYS = 365\n","\n","class FibonacciRetracementAlpha(BaseAlpha):\n","    def get(self, start, end):\n","        # Calculate the start date for data retrieval\n","        pre_start = calculate_previous_start_date(start, LOOKBACK_DAYS)\n","        # Retrieve daily high, low, and closing prices\n","        self.high = self.get_cm(\n","            \"content.fnguide.ftp.price_volume.price_high.1d\"\n","        ).get_df(pre_start, end)\n","        self.low = self.get_cm(\n","            \"content.fnguide.ftp.price_volume.price_low.1d\"\n","        ).get_df(pre_start, end)\n","        self.close = self.get_cm(\n","            \"content.fnguide.ftp.price_volume.price_close.1d\"\n","        ).get_df(pre_start, end)\n","\n","        # Calculate Fibonacci retracement levels\n","        price_range = self.high.max() - self.low.min()\n","        fib_levels = [0.236, 0.382, 0.5, 0.618, 0.786]\n","        retracements = {level: self.high.max() - (price_range * level) for level in fib_levels}\n","\n","        # Generate signals based on Fibonacci retracement levels\n","        signals = self.close.copy()\n","        for level, retracement_price in retracements.items():\n","            # Buy signal if the closing price is at or near a Fibonacci retracement level\n","            signals[self.close <= retracement_price] = 1\n","            # Neutral signal otherwise\n","            signals[self.close > retracement_price] = 0\n","\n","        # Equal weight & setting 1e8 amount\n","        signals = signals.div(signals.sum(axis=1), axis=0) * 1e8\n","\n","        # Shift signals to avoid look-ahead bias\n","        signals = signals.shift(1)\n","\n","        return signals.loc[str(start): str(end)]"],"metadata":{"id":"y02vvN-OX6QH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define the backtest period\n","start_date = 20150101\n","end_date = 20220101\n","\n","# Create an instance of the FibonacciRetracementAlpha class\n","fibonacci_retracement_alpha = FibonacciRetracementAlpha()\n","\n","# Run the strategy to get signals\n","signals = fibonacci_retracement_alpha.get(start_date, end_date)\n","\n","# Display the last few signals\n","signals.tail()"],"metadata":{"id":"DSvr3r8zX8D6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from finter.framework_model.simulation import adj_stat_container_helper\n","\n","# Model information configuration\n","model_info = {\n","    \"exchange\": \"krx\",             # Exchange name, e.g., Korean Exchange (KRX)\n","    \"universe\": \"krx\",             # Universe for the model\n","    \"instrument_type\": \"stock\",    # Type of instrument, e.g., stock\n","    \"freq\": \"1d\",                  # Frequency of data, e.g., daily (1d)\n","    \"position_type\": \"target\",     # Type of position, e.g., target\n","    \"type\": \"alpha\"                # Model type, e.g., alpha\n","}\n","\n","# Generating model statistics\n","model_stat = adj_stat_container_helper(\n","    position=signals,                       # Alpha position data\n","    model_info=model_info,                  # Model information defined above\n","    start=start_date,                       # Start date for the simulation\n","    end=end_date,                           # End date for the simulation\n","    volcap_pct=0,                           # Volume cap percentage\n","    decay=1,                                # Decay factor for volume limit\n","    cost_list=[\"hi_low\", \"fee_tax\"],        # Costs to include (price limits, transaction tax)\n","    slippage=10,                            # Slippage applied (10 basis points)\n","    return_calc_method=\"arithmetic\",        # Method for return calculation (arithmetic)\n","    turnover_calc_method=\"diff\",            # Method for turnover calculation (diff)\n","    booksize=1e8,                           # Size of the book (100 million)\n","    close=True,                             # Whether to use closing prices\n","    adj_dividend=True                       # Apply dividend adjustments\n",")\n","\n","import pandas as pd\n","df = pd.read_json(model_stat['cum_ret'], orient='records').set_index('index')['data']\n","df.index = pd.to_datetime(df.index).to_series().apply(lambda x: x.date())\n","df.plot()"],"metadata":{"id":"xsnxsckaX-ut"},"execution_count":null,"outputs":[]}]}